{"version":3,"sources":["../node_modules/fable-core/AsyncBuilder.js","../node_modules/fable-core/Symbol.js","../node_modules/fable-core/Util.js","../node_modules/fable-core/Choice.js","../node_modules/fable-core/ListClass.js","../node_modules/fable-core/Seq.js","../node_modules/fable-core/Async.js","../node_modules/fable-powerpack/Result.js","../node_modules/fable-powerpack/Promise.js","../node_modules/fable-core/Map.js","../node_modules/fable-core/Set.js","../node_modules/fable-core/Long.js","../node_modules/fable-powerpack/Fetch.js","../laab.fsx","../node_modules/justlazy/src/justlazy.js"],"names":["protectedCont","f","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","err","onError","protectedBind","computation","binder","onSuccess","x","ex","protectedReturn","value","setType","fullName","cons","fableGlobal","types","set","GenericParam","definition","NonDeclaredType","getPropertyNames","obj","propertyMap","FSymbol","reflection","properties","Object","getOwnPropertyNames","toString","o","ToString","String","equals","y","getPrototypeOf","Equals","Array","isArray","length","i","ArrayBuffer","isView","byteLength","dv1","DataView","buffer","dv2","getUint8","Date","getTime","compare","CompareTo","j","b1","b2","equalsRecords","keys","equalsUnions","Case","Fields","compareUnions","res","ofArray$1","args","base","acc","List","ofArray","compareWith","xs","ys","nonZero","tryFind","map2","count","delay","_a","Symbol","iterator","fold","reduce","cur","iter","next","done","map","unfold","iter1","iter2","cur1","cur2","rangeStep","first","step","last","Error","range","defaultValue","emptyContinuation","awaitPromise","p","fromContinuations","conts","then","catch","start","cancellationToken","startWithContinuations","startImmediate","continuation","exceptionContinuation","cancellationContinuation","Trampoline","_createClass","_classCallCheck","instance","Constructor","TypeError","map$1","fn","a","Result","bind","tree_sizeAux","m","tree_size","tree_find","comparer","k","tree_tryFind","c","Compare","tree_mem","tree_collapseLHS","stack","tail","head","MapTree","tree_mkIterator","s","started","tree_moveNext","current","tree_countAux","tree_SetOne","n","SetTree","tree_SetNode","l","r","h","tree_mem$1","t","tree_collapseLHS$1","tree_mkIterator$1","tree_moveNext$1","l1","l2","n1k","t1","tree_compareStacks","n1l","n1r","n2k","n2l","n2r","t2","emp","$target9","listOfArray","$target11","$target8","tree_compare","s1","s2","isLong","Long","unsigned","cachedObj","cache","UINT_CACHE","fromBits","INT_CACHE","fromNumber","isNaN","isFinite","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","fromString","str","radix","RangeError","indexOf","substring","radixToPower","pow_dbl","result","size","Math","min","parseInt","power","mul","add","fromValue","val","low","high","response","ready","document","getElementById","target","_step","_iterator","inputSequence","_iteratorNormalCompletion","root","factory","module","exports","Justlazy","this","_createImage","imgPlaceholder","imgAttributes","onloadCallback","onerrorCallback","onreplaceCallback","img","createElement","onload","call","_replacePlaceholderWithImage","onerror","title","srcset","setAttribute","alt","src","parentNode","replaceChild","_resolveImageAttributes","getAttribute","_validateOptions","options","_isVisible","placeholder","optionalThreshold","windowInnerHeight","window","innerHeight","documentElement","clientHeight","threshold","getBoundingClientRect","top","_loadImgIfVisible","scrollEventCallback","e","lazyLoad","removeEventListener","type","detachEvent","validatedOptions","registerLazyLoad","loadImgIfVisible","addEventListener","attachEvent","registerLazyLoadByClass","imgPlaceholderClass","placeholders","querySelectorAll","callCount","defineProperty","get","enumerable","configurable","prototype","maxTrampolineCallCount","setTimeout","AsyncBuilder","Bind","Combine","computation1","computation2","Delay","generator","For","sequence","body","While","Return","ReturnFrom","TryFinally","compensation","TryWith","catchHandler","ex2","Using","resource","Dispose","guard","_this","Zero","singleton","globalObj","global","self","__FABLE_CORE__","Map","symbols","_Symbol","kind","generics","other","Choice","d","interfaces","from","join","tmp","defaultCancellationToken","Enumerator","MoveNext","Reset","descriptor","writable","key","protoProps","staticProps","defineProperties","caseName","fields","cases","Ok","ResultBuilder","_classCallCheck$1","_createClass$1","left","right","arg00","_Promise","__exports","result$$1","arg0","arg0_1","mapResult","a_1","bindResult","Promise","resolve","PromiseBuilder","seq","_didIteratorError","_iteratorError","undefined","_loop","return","er","f1","f2","reject","er_1","er_2","er_3","promise","FableMap","seqCompareWith","m2","kvp1","kvp2","tree","seqMap","entries","kv","values","has","v","delete","clear","FableSet","tree_count","eq","neq","notEquals","lt","lessThan","lte","lessThanOrEqual","gt","greaterThan","gte","greaterThanOrEqual","comp","negate","abs","absolute","sub","subtract","multiply","div","divide","mod","modulo","shl","shiftLeft","shr","shiftRight","shru","shiftRightUnsigned","toInt","toNumber","isZero","isNegative","radixLong","rem1","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","thisNeg","otherNeg","not","ONE","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtrahend","multiplier","TWO_PWR_24","divisor","toUnsigned","UONE","NEG_ONE","halfThis","approx_1","approx","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","and","or","xor","numBits","toSigned","toBytes","le","toBytesLE","toBytesBE","hi","lo","pow","TWO_PWR_16_DBL","fromInt","JustLazy","justlazy"],"mappings":"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","file":"js/script.min.js","sourcesContent":["var Trampoline = (function () {\r\n    function Trampoline() {\r\n        this.callCount = 0;\r\n    }\r\n    Object.defineProperty(Trampoline, \"maxTrampolineCallCount\", {\r\n        get: function () {\r\n            return 2000;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Trampoline.prototype.incrementAndCheck = function () {\r\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\r\n    };\r\n    Trampoline.prototype.hijack = function (f) {\r\n        this.callCount = 0;\r\n        setTimeout(f, 0);\r\n    };\r\n    return Trampoline;\r\n}());\r\nexport { Trampoline };\r\nexport function protectedCont(f) {\r\n    return function (ctx) {\r\n        if (ctx.cancelToken.isCancelled)\r\n            ctx.onCancel(\"cancelled\");\r\n        else if (ctx.trampoline.incrementAndCheck())\r\n            ctx.trampoline.hijack(function () {\r\n                try {\r\n                    f(ctx);\r\n                }\r\n                catch (err) {\r\n                    ctx.onError(err);\r\n                }\r\n            });\r\n        else\r\n            try {\r\n                f(ctx);\r\n            }\r\n            catch (err) {\r\n                ctx.onError(err);\r\n            }\r\n    };\r\n}\r\nexport function protectedBind(computation, binder) {\r\n    return protectedCont(function (ctx) {\r\n        computation({\r\n            onSuccess: function (x) {\r\n                try {\r\n                    binder(x)(ctx);\r\n                }\r\n                catch (ex) {\r\n                    ctx.onError(ex);\r\n                }\r\n            },\r\n            onError: ctx.onError,\r\n            onCancel: ctx.onCancel,\r\n            cancelToken: ctx.cancelToken,\r\n            trampoline: ctx.trampoline\r\n        });\r\n    });\r\n}\r\nexport function protectedReturn(value) {\r\n    return protectedCont(function (ctx) { return ctx.onSuccess(value); });\r\n}\r\nvar AsyncBuilder = (function () {\r\n    function AsyncBuilder() {\r\n    }\r\n    AsyncBuilder.prototype.Bind = function (computation, binder) {\r\n        return protectedBind(computation, binder);\r\n    };\r\n    AsyncBuilder.prototype.Combine = function (computation1, computation2) {\r\n        return this.Bind(computation1, function () { return computation2; });\r\n    };\r\n    AsyncBuilder.prototype.Delay = function (generator) {\r\n        return protectedCont(function (ctx) { return generator()(ctx); });\r\n    };\r\n    AsyncBuilder.prototype.For = function (sequence, body) {\r\n        var iter = sequence[Symbol.iterator]();\r\n        var cur = iter.next();\r\n        return this.While(function () { return !cur.done; }, this.Delay(function () {\r\n            var res = body(cur.value);\r\n            cur = iter.next();\r\n            return res;\r\n        }));\r\n    };\r\n    AsyncBuilder.prototype.Return = function (value) {\r\n        return protectedReturn(value);\r\n    };\r\n    AsyncBuilder.prototype.ReturnFrom = function (computation) {\r\n        return computation;\r\n    };\r\n    AsyncBuilder.prototype.TryFinally = function (computation, compensation) {\r\n        return protectedCont(function (ctx) {\r\n            computation({\r\n                onSuccess: function (x) {\r\n                    compensation();\r\n                    ctx.onSuccess(x);\r\n                },\r\n                onError: function (x) {\r\n                    compensation();\r\n                    ctx.onError(x);\r\n                },\r\n                onCancel: function (x) {\r\n                    compensation();\r\n                    ctx.onCancel(x);\r\n                },\r\n                cancelToken: ctx.cancelToken,\r\n                trampoline: ctx.trampoline\r\n            });\r\n        });\r\n    };\r\n    AsyncBuilder.prototype.TryWith = function (computation, catchHandler) {\r\n        return protectedCont(function (ctx) {\r\n            computation({\r\n                onSuccess: ctx.onSuccess,\r\n                onCancel: ctx.onCancel,\r\n                cancelToken: ctx.cancelToken,\r\n                trampoline: ctx.trampoline,\r\n                onError: function (ex) {\r\n                    try {\r\n                        catchHandler(ex)(ctx);\r\n                    }\r\n                    catch (ex2) {\r\n                        ctx.onError(ex2);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    };\r\n    AsyncBuilder.prototype.Using = function (resource, binder) {\r\n        return this.TryFinally(binder(resource), function () { return resource.Dispose(); });\r\n    };\r\n    AsyncBuilder.prototype.While = function (guard, computation) {\r\n        var _this = this;\r\n        if (guard())\r\n            return this.Bind(computation, function () { return _this.While(guard, computation); });\r\n        else\r\n            return this.Return(void 0);\r\n    };\r\n    AsyncBuilder.prototype.Zero = function () {\r\n        return protectedCont(function (ctx) { return ctx.onSuccess(void 0); });\r\n    };\r\n    return AsyncBuilder;\r\n}());\r\nexport { AsyncBuilder };\r\nexport var singleton = new AsyncBuilder();\r\n","var fableGlobal = function () {\r\n    var globalObj = typeof window !== \"undefined\" ? window\r\n        : (typeof global !== \"undefined\" ? global\r\n            : (typeof self !== \"undefined\" ? self : {}));\r\n    if (typeof globalObj.__FABLE_CORE__ === \"undefined\") {\r\n        globalObj.__FABLE_CORE__ = {\r\n            types: new Map(),\r\n            symbols: {\r\n                reflection: Symbol(\"reflection\"),\r\n            }\r\n        };\r\n    }\r\n    return globalObj.__FABLE_CORE__;\r\n}();\r\nexport function setType(fullName, cons) {\r\n    fableGlobal.types.set(fullName, cons);\r\n}\r\nexport function getType(fullName) {\r\n    return fableGlobal.types.get(fullName);\r\n}\r\nexport default (fableGlobal.symbols);\r\n","import FSymbol from \"./Symbol\";\r\nvar NonDeclaredType = (function () {\r\n    function NonDeclaredType(kind, definition, generics) {\r\n        this.kind = kind;\r\n        this.definition = definition;\r\n        this.generics = generics;\r\n    }\r\n    NonDeclaredType.prototype.Equals = function (other) {\r\n        if (this.kind === other.kind && this.definition === other.definition) {\r\n            return typeof this.generics === \"object\"\r\n                ? equalsRecords(this.generics, other.generics)\r\n                : this.generics === other.generics;\r\n        }\r\n        return false;\r\n    };\r\n    return NonDeclaredType;\r\n}());\r\nexport { NonDeclaredType };\r\nexport var Any = new NonDeclaredType(\"Any\");\r\nexport var Unit = new NonDeclaredType(\"Unit\");\r\nexport function Option(t) {\r\n    return new NonDeclaredType(\"Option\", null, t);\r\n}\r\nfunction FableArray(t, isTypedArray) {\r\n    if (isTypedArray === void 0) { isTypedArray = false; }\r\n    var def = null, genArg = null;\r\n    if (isTypedArray) {\r\n        def = t;\r\n    }\r\n    else {\r\n        genArg = t;\r\n    }\r\n    return new NonDeclaredType(\"Array\", def, genArg);\r\n}\r\nexport { FableArray as Array };\r\nexport function Tuple(ts) {\r\n    return new NonDeclaredType(\"Tuple\", null, ts);\r\n}\r\nexport function GenericParam(definition) {\r\n    return new NonDeclaredType(\"GenericParam\", definition);\r\n}\r\nexport function Interface(definition) {\r\n    return new NonDeclaredType(\"Interface\", definition);\r\n}\r\nexport function makeGeneric(typeDef, genArgs) {\r\n    return new NonDeclaredType(\"GenericType\", typeDef, genArgs);\r\n}\r\nexport function isGeneric(typ) {\r\n    return typ instanceof NonDeclaredType && typ.kind === \"GenericType\";\r\n}\r\nexport function getDefinition(typ) {\r\n    return isGeneric(typ) ? typ.definition : typ;\r\n}\r\nexport function extendInfo(cons, info) {\r\n    var parent = Object.getPrototypeOf(cons.prototype);\r\n    if (typeof parent[FSymbol.reflection] === \"function\") {\r\n        var newInfo_1 = {}, parentInfo_1 = parent[FSymbol.reflection]();\r\n        Object.getOwnPropertyNames(info).forEach(function (k) {\r\n            var i = info[k];\r\n            if (typeof i === \"object\") {\r\n                newInfo_1[k] = Array.isArray(i)\r\n                    ? (parentInfo_1[k] || []).concat(i)\r\n                    : Object.assign(parentInfo_1[k] || {}, i);\r\n            }\r\n            else {\r\n                newInfo_1[k] = i;\r\n            }\r\n        });\r\n        return newInfo_1;\r\n    }\r\n    return info;\r\n}\r\nexport function hasInterface(obj, interfaceName) {\r\n    if (interfaceName === \"System.Collections.Generic.IEnumerable\") {\r\n        return typeof obj[Symbol.iterator] === \"function\";\r\n    }\r\n    else if (typeof obj[FSymbol.reflection] === \"function\") {\r\n        var interfaces = obj[FSymbol.reflection]().interfaces;\r\n        return Array.isArray(interfaces) && interfaces.indexOf(interfaceName) > -1;\r\n    }\r\n    return false;\r\n}\r\nexport function getPropertyNames(obj) {\r\n    if (obj == null) {\r\n        return [];\r\n    }\r\n    var propertyMap = typeof obj[FSymbol.reflection] === \"function\" ? obj[FSymbol.reflection]().properties || [] : obj;\r\n    return Object.getOwnPropertyNames(propertyMap);\r\n}\r\nexport function isArray(obj) {\r\n    return Array.isArray(obj) || ArrayBuffer.isView(obj);\r\n}\r\nexport function getRestParams(args, idx) {\r\n    for (var _len = args.length, restArgs = Array(_len > idx ? _len - idx : 0), _key = idx; _key < _len; _key++)\r\n        restArgs[_key - idx] = args[_key];\r\n    return restArgs;\r\n}\r\nexport function toString(o) {\r\n    return o != null && typeof o.ToString == \"function\" ? o.ToString() : String(o);\r\n}\r\nexport function hash(x) {\r\n    var s = JSON.stringify(x);\r\n    var h = 5381, i = 0, len = s.length;\r\n    while (i < len) {\r\n        h = (h * 33) ^ s.charCodeAt(i++);\r\n    }\r\n    return h;\r\n}\r\nexport function equals(x, y) {\r\n    if (x === y)\r\n        return true;\r\n    else if (x == null)\r\n        return y == null;\r\n    else if (y == null)\r\n        return false;\r\n    else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y))\r\n        return false;\r\n    else if (typeof x.Equals === \"function\")\r\n        return x.Equals(y);\r\n    else if (Array.isArray(x)) {\r\n        if (x.length != y.length)\r\n            return false;\r\n        for (var i = 0; i < x.length; i++)\r\n            if (!equals(x[i], y[i]))\r\n                return false;\r\n        return true;\r\n    }\r\n    else if (ArrayBuffer.isView(x)) {\r\n        if (x.byteLength !== y.byteLength)\r\n            return false;\r\n        var dv1 = new DataView(x.buffer), dv2 = new DataView(y.buffer);\r\n        for (var i = 0; i < x.byteLength; i++)\r\n            if (dv1.getUint8(i) !== dv2.getUint8(i))\r\n                return false;\r\n        return true;\r\n    }\r\n    else if (x instanceof Date)\r\n        return x.getTime() == y.getTime();\r\n    else\r\n        return false;\r\n}\r\nexport function compare(x, y) {\r\n    if (x === y)\r\n        return 0;\r\n    if (x == null)\r\n        return y == null ? 0 : -1;\r\n    else if (y == null)\r\n        return 1;\r\n    else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y))\r\n        return -1;\r\n    else if (typeof x.CompareTo === \"function\")\r\n        return x.CompareTo(y);\r\n    else if (Array.isArray(x)) {\r\n        if (x.length != y.length)\r\n            return x.length < y.length ? -1 : 1;\r\n        for (var i = 0, j = 0; i < x.length; i++)\r\n            if ((j = compare(x[i], y[i])) !== 0)\r\n                return j;\r\n        return 0;\r\n    }\r\n    else if (ArrayBuffer.isView(x)) {\r\n        if (x.byteLength != y.byteLength)\r\n            return x.byteLength < y.byteLength ? -1 : 1;\r\n        var dv1 = new DataView(x.buffer), dv2 = new DataView(y.buffer);\r\n        for (var i = 0, b1 = 0, b2 = 0; i < x.byteLength; i++) {\r\n            b1 = dv1.getUint8(i), b2 = dv2.getUint8(i);\r\n            if (b1 < b2)\r\n                return -1;\r\n            if (b1 > b2)\r\n                return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    else if (x instanceof Date)\r\n        return compare(x.getTime(), y.getTime());\r\n    else\r\n        return x < y ? -1 : 1;\r\n}\r\nexport function equalsRecords(x, y) {\r\n    if (x === y) {\r\n        return true;\r\n    }\r\n    else {\r\n        var keys = getPropertyNames(x);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            if (!equals(x[keys[i]], y[keys[i]]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport function compareRecords(x, y) {\r\n    if (x === y) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var keys = getPropertyNames(x);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            var res = compare(x[keys[i]], y[keys[i]]);\r\n            if (res !== 0)\r\n                return res;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nexport function equalsUnions(x, y) {\r\n    if (x === y) {\r\n        return true;\r\n    }\r\n    else if (x.Case !== y.Case) {\r\n        return false;\r\n    }\r\n    else {\r\n        for (var i = 0; i < x.Fields.length; i++) {\r\n            if (!equals(x.Fields[i], y.Fields[i]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport function compareUnions(x, y) {\r\n    if (x === y) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var res = compare(x.Case, y.Case);\r\n        if (res !== 0)\r\n            return res;\r\n        for (var i = 0; i < x.Fields.length; i++) {\r\n            res = compare(x.Fields[i], y.Fields[i]);\r\n            if (res !== 0)\r\n                return res;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nexport function createDisposable(f) {\r\n    return _a = {\r\n            Dispose: f\r\n        },\r\n        _a[FSymbol.reflection] = function () { return { interfaces: [\"System.IDisposable\"] }; },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function createObj(fields) {\r\n    var iter = fields[Symbol.iterator]();\r\n    var cur = iter.next(), o = {};\r\n    while (!cur.done) {\r\n        o[cur.value[0]] = cur.value[1];\r\n        cur = iter.next();\r\n    }\r\n    return o;\r\n}\r\nexport function toPlainJsObj(source) {\r\n    if (source != null && source.constructor != Object) {\r\n        var target = {};\r\n        var props = Object.getOwnPropertyNames(source);\r\n        for (var i = 0; i < props.length; i++) {\r\n            target[props[i]] = source[props[i]];\r\n        }\r\n        var proto = Object.getPrototypeOf(source);\r\n        if (proto != null) {\r\n            props = Object.getOwnPropertyNames(proto);\r\n            for (var i = 0; i < props.length; i++) {\r\n                var prop = Object.getOwnPropertyDescriptor(proto, props[i]);\r\n                if (prop.value) {\r\n                    target[props[i]] = prop.value;\r\n                }\r\n                else if (prop.get) {\r\n                    target[props[i]] = prop.get.apply(source);\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    else {\r\n        return source;\r\n    }\r\n}\r\nexport function round(value, digits) {\r\n    if (digits === void 0) { digits = 0; }\r\n    var m = Math.pow(10, digits);\r\n    var n = +(digits ? value * m : value).toFixed(8);\r\n    var i = Math.floor(n), f = n - i;\r\n    var e = 1e-8;\r\n    var r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 == 0) ? i : i + 1) : Math.round(n);\r\n    return digits ? r / m : r;\r\n}\r\nexport function randomNext(min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\nexport function defaultArg(arg, defaultValue, f) {\r\n    return arg == null ? defaultValue : (f != null ? f(arg) : arg);\r\n}\r\n","import FSymbol from \"./Symbol\";\r\nimport { equalsUnions } from \"./Util\";\r\nimport { compareUnions } from \"./Util\";\r\nexport function choice1Of2(v) {\r\n    return new Choice(\"Choice1Of2\", [v]);\r\n}\r\nexport function choice2Of2(v) {\r\n    return new Choice(\"Choice2Of2\", [v]);\r\n}\r\nvar Choice = (function () {\r\n    function Choice(t, d) {\r\n        this.Case = t;\r\n        this.Fields = d;\r\n    }\r\n    Object.defineProperty(Choice.prototype, \"valueIfChoice1\", {\r\n        get: function () {\r\n            return this.Case === \"Choice1Of2\" ? this.Fields[0] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Choice.prototype, \"valueIfChoice2\", {\r\n        get: function () {\r\n            return this.Case === \"Choice2Of2\" ? this.Fields[0] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Choice.prototype.Equals = function (other) {\r\n        return equalsUnions(this, other);\r\n    };\r\n    Choice.prototype.CompareTo = function (other) {\r\n        return compareUnions(this, other);\r\n    };\r\n    Choice.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Core.FSharpChoice\",\r\n            interfaces: [\"FSharpUnion\", \"System.IEquatable\", \"System.IComparable\"]\r\n        };\r\n    };\r\n    return Choice;\r\n}());\r\nexport default Choice;\r\n","import FSymbol from \"./Symbol\";\r\nimport { toString } from \"./Util\";\r\nimport { equals } from \"./Util\";\r\nimport { compare } from \"./Util\";\r\nexport function ofArray(args, base) {\r\n    var acc = base || new List();\r\n    for (var i = args.length - 1; i >= 0; i--) {\r\n        acc = new List(args[i], acc);\r\n    }\r\n    return acc;\r\n}\r\nvar List = (function () {\r\n    function List(head, tail) {\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    List.prototype.ToString = function () {\r\n        return \"[\" + Array.from(this).map(toString).join(\"; \") + \"]\";\r\n    };\r\n    List.prototype.Equals = function (x) {\r\n        if (this === x) {\r\n            return true;\r\n        }\r\n        else {\r\n            var iter1 = this[Symbol.iterator](), iter2 = x[Symbol.iterator]();\r\n            for (;;) {\r\n                var cur1 = iter1.next(), cur2 = iter2.next();\r\n                if (cur1.done)\r\n                    return cur2.done ? true : false;\r\n                else if (cur2.done)\r\n                    return false;\r\n                else if (!equals(cur1.value, cur2.value))\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n    List.prototype.CompareTo = function (x) {\r\n        if (this === x) {\r\n            return 0;\r\n        }\r\n        else {\r\n            var acc = 0;\r\n            var iter1 = this[Symbol.iterator](), iter2 = x[Symbol.iterator]();\r\n            for (;;) {\r\n                var cur1 = iter1.next(), cur2 = iter2.next();\r\n                if (cur1.done)\r\n                    return cur2.done ? acc : -1;\r\n                else if (cur2.done)\r\n                    return 1;\r\n                else {\r\n                    acc = compare(cur1.value, cur2.value);\r\n                    if (acc != 0)\r\n                        return acc;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(List.prototype, \"length\", {\r\n        get: function () {\r\n            var cur = this, acc = 0;\r\n            while (cur.tail != null) {\r\n                cur = cur.tail;\r\n                acc++;\r\n            }\r\n            return acc;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    List.prototype[Symbol.iterator] = function () {\r\n        var cur = this;\r\n        return {\r\n            next: function () {\r\n                var tmp = cur;\r\n                cur = cur.tail;\r\n                return { done: tmp.tail == null, value: tmp.head };\r\n            }\r\n        };\r\n    };\r\n    List.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Collections.FSharpList\",\r\n            interfaces: [\"System.IEquatable\", \"System.IComparable\"]\r\n        };\r\n    };\r\n    return List;\r\n}());\r\nexport default List;\r\n","import { equals } from \"./Util\";\r\nimport { compare } from \"./Util\";\r\nimport { permute as arrayPermute } from \"./Array\";\r\nimport List from \"./ListClass\";\r\nvar Enumerator = (function () {\r\n    function Enumerator(iter) {\r\n        this.iter = iter;\r\n    }\r\n    Enumerator.prototype.MoveNext = function () {\r\n        var cur = this.iter.next();\r\n        this.current = cur.value;\r\n        return !cur.done;\r\n    };\r\n    Object.defineProperty(Enumerator.prototype, \"Current\", {\r\n        get: function () {\r\n            return this.current;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Enumerator.prototype.Reset = function () {\r\n        throw new Error(\"JS iterators cannot be reset\");\r\n    };\r\n    Enumerator.prototype.Dispose = function () { };\r\n    return Enumerator;\r\n}());\r\nexport { Enumerator };\r\nexport function getEnumerator(o) {\r\n    return typeof o.GetEnumerator === \"function\"\r\n        ? o.GetEnumerator() : new Enumerator(o[Symbol.iterator]());\r\n}\r\nexport function toIterator(en) {\r\n    return {\r\n        next: function () {\r\n            return en.MoveNext()\r\n                ? { done: false, value: en.Current }\r\n                : { done: true, value: null };\r\n        }\r\n    };\r\n}\r\nfunction __failIfNone(res) {\r\n    if (res == null)\r\n        throw new Error(\"Seq did not contain any matching element\");\r\n    return res;\r\n}\r\nexport function toList(xs) {\r\n    return foldBack(function (x, acc) {\r\n        return new List(x, acc);\r\n    }, xs, new List());\r\n}\r\nexport function ofList(xs) {\r\n    return delay(function () { return unfold(function (x) { return x.tail != null ? [x.head, x.tail] : null; }, xs); });\r\n}\r\nexport function ofArray(xs) {\r\n    return delay(function () { return unfold(function (i) { return i < xs.length ? [xs[i], i + 1] : null; }, 0); });\r\n}\r\nexport function append(xs, ys) {\r\n    return delay(function () {\r\n        var firstDone = false;\r\n        var i = xs[Symbol.iterator]();\r\n        var iters = [i, null];\r\n        return unfold(function () {\r\n            var cur;\r\n            if (!firstDone) {\r\n                cur = iters[0].next();\r\n                if (!cur.done) {\r\n                    return [cur.value, iters];\r\n                }\r\n                else {\r\n                    firstDone = true;\r\n                    iters = [null, ys[Symbol.iterator]()];\r\n                }\r\n            }\r\n            cur = iters[1].next();\r\n            return !cur.done ? [cur.value, iters] : null;\r\n        }, iters);\r\n    });\r\n}\r\nexport function average(xs) {\r\n    var count = 1;\r\n    var sum = reduce(function (acc, x) {\r\n        count++;\r\n        return acc + x;\r\n    }, xs);\r\n    return sum / count;\r\n}\r\nexport function averageBy(f, xs) {\r\n    var count = 1;\r\n    var sum = reduce(function (acc, x) {\r\n        count++;\r\n        return (count === 2 ? f(acc) : acc) + f(x);\r\n    }, xs);\r\n    return sum / count;\r\n}\r\nexport function concat(xs) {\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        var output = null;\r\n        return unfold(function (innerIter) {\r\n            var hasFinished = false;\r\n            while (!hasFinished) {\r\n                if (innerIter == null) {\r\n                    var cur = iter.next();\r\n                    if (!cur.done) {\r\n                        innerIter = cur.value[Symbol.iterator]();\r\n                    }\r\n                    else {\r\n                        hasFinished = true;\r\n                    }\r\n                }\r\n                else {\r\n                    var cur = innerIter.next();\r\n                    if (!cur.done) {\r\n                        output = cur.value;\r\n                        hasFinished = true;\r\n                    }\r\n                    else {\r\n                        innerIter = null;\r\n                    }\r\n                }\r\n            }\r\n            return innerIter != null && output != null ? [output, innerIter] : null;\r\n        }, null);\r\n    });\r\n}\r\nexport function collect(f, xs) {\r\n    return concat(map(f, xs));\r\n}\r\nexport function choose(f, xs) {\r\n    var trySkipToNext = function (iter) {\r\n        var cur = iter.next();\r\n        if (!cur.done) {\r\n            var y = f(cur.value);\r\n            return y != null ? [y, iter] : trySkipToNext(iter);\r\n        }\r\n        return void 0;\r\n    };\r\n    return delay(function () {\r\n        return unfold(function (iter) {\r\n            return trySkipToNext(iter);\r\n        }, xs[Symbol.iterator]());\r\n    });\r\n}\r\nexport function compareWith(f, xs, ys) {\r\n    var nonZero = tryFind(function (i) { return i != 0; }, map2(function (x, y) { return f(x, y); }, xs, ys));\r\n    return nonZero != null ? nonZero : count(xs) - count(ys);\r\n}\r\nexport function delay(f) {\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () { return f()[Symbol.iterator](); },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function empty() {\r\n    return unfold(function () { return void 0; });\r\n}\r\nexport function enumerateWhile(cond, xs) {\r\n    return concat(unfold(function () { return cond() ? [xs, true] : null; }));\r\n}\r\nexport function enumerateThenFinally(xs, finalFn) {\r\n    return delay(function () {\r\n        var iter;\r\n        try {\r\n            iter = xs[Symbol.iterator]();\r\n        }\r\n        catch (err) {\r\n            return void 0;\r\n        }\r\n        finally {\r\n            finalFn();\r\n        }\r\n        return unfold(function (iter) {\r\n            try {\r\n                var cur = iter.next();\r\n                return !cur.done ? [cur.value, iter] : null;\r\n            }\r\n            catch (err) {\r\n                return void 0;\r\n            }\r\n            finally {\r\n                finalFn();\r\n            }\r\n        }, iter);\r\n    });\r\n}\r\nexport function enumerateUsing(disp, work) {\r\n    var isDisposed = false;\r\n    var disposeOnce = function () {\r\n        if (!isDisposed) {\r\n            isDisposed = true;\r\n            disp.Dispose();\r\n        }\r\n    };\r\n    try {\r\n        return enumerateThenFinally(work(disp), disposeOnce);\r\n    }\r\n    catch (err) {\r\n        return void 0;\r\n    }\r\n    finally {\r\n        disposeOnce();\r\n    }\r\n}\r\nexport function exactlyOne(xs) {\r\n    var iter = xs[Symbol.iterator]();\r\n    var fst = iter.next();\r\n    if (fst.done)\r\n        throw new Error(\"Seq was empty\");\r\n    var snd = iter.next();\r\n    if (!snd.done)\r\n        throw new Error(\"Seq had multiple items\");\r\n    return fst.value;\r\n}\r\nexport function except(itemsToExclude, source) {\r\n    var exclusionItems = Array.from(itemsToExclude);\r\n    var testIsNotInExclusionItems = function (element) { return !exclusionItems.some(function (excludedItem) { return equals(excludedItem, element); }); };\r\n    return filter(testIsNotInExclusionItems, source);\r\n}\r\nexport function exists(f, xs) {\r\n    function aux(iter) {\r\n        var cur = iter.next();\r\n        return !cur.done && (f(cur.value) || aux(iter));\r\n    }\r\n    return aux(xs[Symbol.iterator]());\r\n}\r\nexport function exists2(f, xs, ys) {\r\n    function aux(iter1, iter2) {\r\n        var cur1 = iter1.next(), cur2 = iter2.next();\r\n        return !cur1.done && !cur2.done && (f(cur1.value, cur2.value) || aux(iter1, iter2));\r\n    }\r\n    return aux(xs[Symbol.iterator](), ys[Symbol.iterator]());\r\n}\r\nexport function filter(f, xs) {\r\n    function trySkipToNext(iter) {\r\n        var cur = iter.next();\r\n        while (!cur.done) {\r\n            if (f(cur.value)) {\r\n                return [cur.value, iter];\r\n            }\r\n            cur = iter.next();\r\n        }\r\n        return void 0;\r\n    }\r\n    return delay(function () { return unfold(trySkipToNext, xs[Symbol.iterator]()); });\r\n}\r\nexport function where(f, xs) {\r\n    return filter(f, xs);\r\n}\r\nexport function fold(f, acc, xs) {\r\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\r\n        return xs.reduce(f, acc);\r\n    }\r\n    else {\r\n        var cur = void 0;\r\n        for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n            cur = iter.next();\r\n            if (cur.done)\r\n                break;\r\n            acc = f(acc, cur.value, i);\r\n        }\r\n        return acc;\r\n    }\r\n}\r\nexport function foldBack(f, xs, acc) {\r\n    var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        acc = f(arr[i], acc, i);\r\n    }\r\n    return acc;\r\n}\r\nexport function fold2(f, acc, xs, ys) {\r\n    var iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();\r\n    var cur1, cur2;\r\n    for (var i = 0;; i++) {\r\n        cur1 = iter1.next();\r\n        cur2 = iter2.next();\r\n        if (cur1.done || cur2.done) {\r\n            break;\r\n        }\r\n        acc = f(acc, cur1.value, cur2.value, i);\r\n    }\r\n    return acc;\r\n}\r\nexport function foldBack2(f, xs, ys, acc) {\r\n    var ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    var ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\r\n    for (var i = ar1.length - 1; i >= 0; i--) {\r\n        acc = f(ar1[i], ar2[i], acc, i);\r\n    }\r\n    return acc;\r\n}\r\nexport function forAll(f, xs) {\r\n    return fold(function (acc, x) { return acc && f(x); }, true, xs);\r\n}\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2(function (acc, x, y) { return acc && f(x, y); }, true, xs, ys);\r\n}\r\nexport function tryHead(xs) {\r\n    var iter = xs[Symbol.iterator]();\r\n    var cur = iter.next();\r\n    return cur.done ? null : cur.value;\r\n}\r\nexport function head(xs) {\r\n    return __failIfNone(tryHead(xs));\r\n}\r\nexport function initialize(n, f) {\r\n    return delay(function () {\r\n        return unfold(function (i) { return i < n ? [f(i), i + 1] : null; }, 0);\r\n    });\r\n}\r\nexport function initializeInfinite(f) {\r\n    return delay(function () {\r\n        return unfold(function (i) { return [f(i), i + 1]; }, 0);\r\n    });\r\n}\r\nexport function tryItem(i, xs) {\r\n    if (i < 0)\r\n        return null;\r\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs))\r\n        return i < xs.length ? xs[i] : null;\r\n    for (var j = 0, iter = xs[Symbol.iterator]();; j++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return null;\r\n        if (j === i)\r\n            return cur.value;\r\n    }\r\n}\r\nexport function item(i, xs) {\r\n    return __failIfNone(tryItem(i, xs));\r\n}\r\nexport function iterate(f, xs) {\r\n    fold(function (_, x) { return f(x); }, null, xs);\r\n}\r\nexport function iterate2(f, xs, ys) {\r\n    fold2(function (_, x, y) { return f(x, y); }, null, xs, ys);\r\n}\r\nexport function iterateIndexed(f, xs) {\r\n    fold(function (_, x, i) { return f(i, x); }, null, xs);\r\n}\r\nexport function iterateIndexed2(f, xs, ys) {\r\n    fold2(function (_, x, y, i) { return f(i, x, y); }, null, xs, ys);\r\n}\r\nexport function isEmpty(xs) {\r\n    var i = xs[Symbol.iterator]();\r\n    return i.next().done;\r\n}\r\nexport function tryLast(xs) {\r\n    try {\r\n        return reduce(function (_, x) { return x; }, xs);\r\n    }\r\n    catch (err) {\r\n        return null;\r\n    }\r\n}\r\nexport function last(xs) {\r\n    return __failIfNone(tryLast(xs));\r\n}\r\nexport function count(xs) {\r\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\r\n        ? xs.length\r\n        : fold(function (acc, x) { return acc + 1; }, 0, xs);\r\n}\r\nexport function map(f, xs) {\r\n    return delay(function () { return unfold(function (iter) {\r\n        var cur = iter.next();\r\n        return !cur.done ? [f(cur.value), iter] : null;\r\n    }, xs[Symbol.iterator]()); });\r\n}\r\nexport function mapIndexed(f, xs) {\r\n    return delay(function () {\r\n        var i = 0;\r\n        return unfold(function (iter) {\r\n            var cur = iter.next();\r\n            return !cur.done ? [f(i++, cur.value), iter] : null;\r\n        }, xs[Symbol.iterator]());\r\n    });\r\n}\r\nexport function map2(f, xs, ys) {\r\n    return delay(function () {\r\n        var iter1 = xs[Symbol.iterator]();\r\n        var iter2 = ys[Symbol.iterator]();\r\n        return unfold(function () {\r\n            var cur1 = iter1.next(), cur2 = iter2.next();\r\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\r\n        });\r\n    });\r\n}\r\nexport function mapIndexed2(f, xs, ys) {\r\n    return delay(function () {\r\n        var i = 0;\r\n        var iter1 = xs[Symbol.iterator]();\r\n        var iter2 = ys[Symbol.iterator]();\r\n        return unfold(function () {\r\n            var cur1 = iter1.next(), cur2 = iter2.next();\r\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\r\n        });\r\n    });\r\n}\r\nexport function map3(f, xs, ys, zs) {\r\n    return delay(function () {\r\n        var iter1 = xs[Symbol.iterator]();\r\n        var iter2 = ys[Symbol.iterator]();\r\n        var iter3 = zs[Symbol.iterator]();\r\n        return unfold(function () {\r\n            var cur1 = iter1.next(), cur2 = iter2.next(), cur3 = iter3.next();\r\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\r\n        });\r\n    });\r\n}\r\nexport function mapFold(f, acc, xs) {\r\n    var result = [];\r\n    var r;\r\n    var cur;\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        cur = iter.next();\r\n        if (cur.done)\r\n            break;\r\n        _a = f(acc, cur.value), r = _a[0], acc = _a[1];\r\n        result.push(r);\r\n    }\r\n    return [result, acc];\r\n    var _a;\r\n}\r\nexport function mapFoldBack(f, xs, acc) {\r\n    var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    var result = [];\r\n    var r;\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        _a = f(arr[i], acc), r = _a[0], acc = _a[1];\r\n        result.push(r);\r\n    }\r\n    return [result, acc];\r\n    var _a;\r\n}\r\nexport function max(xs) {\r\n    return reduce(function (acc, x) { return compare(acc, x) === 1 ? acc : x; }, xs);\r\n}\r\nexport function maxBy(f, xs) {\r\n    return reduce(function (acc, x) { return compare(f(acc), f(x)) === 1 ? acc : x; }, xs);\r\n}\r\nexport function min(xs) {\r\n    return reduce(function (acc, x) { return compare(acc, x) === -1 ? acc : x; }, xs);\r\n}\r\nexport function minBy(f, xs) {\r\n    return reduce(function (acc, x) { return compare(f(acc), f(x)) === -1 ? acc : x; }, xs);\r\n}\r\nexport function pairwise(xs) {\r\n    return skip(2, scan(function (last, next) { return [last[1], next]; }, [0, 0], xs));\r\n}\r\nexport function permute(f, xs) {\r\n    return ofArray(arrayPermute(f, Array.from(xs)));\r\n}\r\nexport function rangeStep(first, step, last) {\r\n    if (step === 0)\r\n        throw new Error(\"Step cannot be 0\");\r\n    return delay(function () { return unfold(function (x) { return step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null; }, first); });\r\n}\r\nexport function rangeChar(first, last) {\r\n    return delay(function () { return unfold(function (x) { return x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null; }, first); });\r\n}\r\nexport function range(first, last) {\r\n    return rangeStep(first, 1, last);\r\n}\r\nexport function readOnly(xs) {\r\n    return map(function (x) { return x; }, xs);\r\n}\r\nexport function reduce(f, xs) {\r\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs))\r\n        return xs.reduce(f);\r\n    var iter = xs[Symbol.iterator]();\r\n    var cur = iter.next();\r\n    if (cur.done)\r\n        throw new Error(\"Seq was empty\");\r\n    var acc = cur.value;\r\n    for (;;) {\r\n        cur = iter.next();\r\n        if (cur.done)\r\n            break;\r\n        acc = f(acc, cur.value);\r\n    }\r\n    return acc;\r\n}\r\nexport function reduceBack(f, xs) {\r\n    var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    if (ar.length === 0)\r\n        throw new Error(\"Seq was empty\");\r\n    var acc = ar[ar.length - 1];\r\n    for (var i = ar.length - 2; i >= 0; i--)\r\n        acc = f(ar[i], acc, i);\r\n    return acc;\r\n}\r\nexport function replicate(n, x) {\r\n    return initialize(n, function () { return x; });\r\n}\r\nexport function reverse(xs) {\r\n    var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\r\n    return ofArray(ar.reverse());\r\n}\r\nexport function scan(f, seed, xs) {\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        return unfold(function (acc) {\r\n            if (acc == null)\r\n                return [seed, seed];\r\n            var cur = iter.next();\r\n            if (!cur.done) {\r\n                acc = f(acc, cur.value);\r\n                return [acc, acc];\r\n            }\r\n            return void 0;\r\n        }, null);\r\n    });\r\n}\r\nexport function scanBack(f, xs, seed) {\r\n    return reverse(scan(function (acc, x) { return f(x, acc); }, seed, reverse(xs)));\r\n}\r\nexport function singleton(x) {\r\n    return unfold(function (x) { return x != null ? [x, null] : null; }, x);\r\n}\r\nexport function skip(n, xs) {\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () {\r\n            var iter = xs[Symbol.iterator]();\r\n            for (var i = 1; i <= n; i++)\r\n                if (iter.next().done)\r\n                    throw new Error(\"Seq has not enough elements\");\r\n            return iter;\r\n        },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function skipWhile(f, xs) {\r\n    return delay(function () {\r\n        var hasPassed = false;\r\n        return filter(function (x) { return hasPassed || (hasPassed = !f(x)); }, xs);\r\n    });\r\n}\r\nexport function sortWith(f, xs) {\r\n    var ys = Array.from(xs);\r\n    return ofArray(ys.sort(f));\r\n}\r\nexport function sum(xs) {\r\n    return fold(function (acc, x) { return acc + x; }, 0, xs);\r\n}\r\nexport function sumBy(f, xs) {\r\n    return fold(function (acc, x) { return acc + f(x); }, 0, xs);\r\n}\r\nexport function tail(xs) {\r\n    var iter = xs[Symbol.iterator]();\r\n    var cur = iter.next();\r\n    if (cur.done)\r\n        throw new Error(\"Seq was empty\");\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () { return iter; },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function take(n, xs, truncate) {\r\n    if (truncate === void 0) { truncate = false; }\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        return unfold(function (i) {\r\n            if (i < n) {\r\n                var cur = iter.next();\r\n                if (!cur.done)\r\n                    return [cur.value, i + 1];\r\n                if (!truncate)\r\n                    throw new Error(\"Seq has not enough elements\");\r\n            }\r\n            return void 0;\r\n        }, 0);\r\n    });\r\n}\r\nexport function truncate(n, xs) {\r\n    return take(n, xs, true);\r\n}\r\nexport function takeWhile(f, xs) {\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        return unfold(function (i) {\r\n            var cur = iter.next();\r\n            if (!cur.done && f(cur.value))\r\n                return [cur.value, null];\r\n            return void 0;\r\n        }, 0);\r\n    });\r\n}\r\nexport function tryFind(f, xs, defaultValue) {\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return defaultValue === void 0 ? null : defaultValue;\r\n        if (f(cur.value, i))\r\n            return cur.value;\r\n    }\r\n}\r\nexport function find(f, xs) {\r\n    return __failIfNone(tryFind(f, xs));\r\n}\r\nexport function tryFindBack(f, xs, defaultValue) {\r\n    var match = null;\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return match === null ? (defaultValue === void 0 ? null : defaultValue) : match;\r\n        if (f(cur.value, i))\r\n            match = cur.value;\r\n    }\r\n}\r\nexport function findBack(f, xs) {\r\n    return __failIfNone(tryFindBack(f, xs));\r\n}\r\nexport function tryFindIndex(f, xs) {\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return null;\r\n        if (f(cur.value, i))\r\n            return i;\r\n    }\r\n}\r\nexport function findIndex(f, xs) {\r\n    return __failIfNone(tryFindIndex(f, xs));\r\n}\r\nexport function tryFindIndexBack(f, xs) {\r\n    var match = -1;\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return match === -1 ? null : match;\r\n        if (f(cur.value, i))\r\n            match = i;\r\n    }\r\n}\r\nexport function findIndexBack(f, xs) {\r\n    return __failIfNone(tryFindIndexBack(f, xs));\r\n}\r\nexport function tryPick(f, xs) {\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            break;\r\n        var y = f(cur.value, i);\r\n        if (y != null)\r\n            return y;\r\n    }\r\n    return void 0;\r\n}\r\nexport function pick(f, xs) {\r\n    return __failIfNone(tryPick(f, xs));\r\n}\r\nexport function unfold(f, acc) {\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () {\r\n            return {\r\n                next: function () {\r\n                    var res = f(acc);\r\n                    if (res != null) {\r\n                        acc = res[1];\r\n                        return { done: false, value: res[0] };\r\n                    }\r\n                    return { done: true };\r\n                }\r\n            };\r\n        },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function zip(xs, ys) {\r\n    return map2(function (x, y) { return [x, y]; }, xs, ys);\r\n}\r\nexport function zip3(xs, ys, zs) {\r\n    return map3(function (x, y, z) { return [x, y, z]; }, xs, ys, zs);\r\n}\r\n","import { Trampoline } from \"./AsyncBuilder\";\r\nimport { protectedCont } from \"./AsyncBuilder\";\r\nimport { protectedBind } from \"./AsyncBuilder\";\r\nimport { protectedReturn } from \"./AsyncBuilder\";\r\nimport { choice1Of2 } from \"./Choice\";\r\nimport { choice2Of2 } from \"./Choice\";\r\nimport { map } from \"./Seq\";\r\nvar Async = (function () {\r\n    function Async() {\r\n    }\r\n    return Async;\r\n}());\r\nexport default Async;\r\nfunction emptyContinuation(x) {\r\n}\r\nexport function awaitPromise(p) {\r\n    return fromContinuations(function (conts) {\r\n        return p.then(conts[0]).catch(function (err) {\r\n            return (err == \"cancelled\" ? conts[2] : conts[1])(err);\r\n        });\r\n    });\r\n}\r\nexport function cancellationToken() {\r\n    return protectedCont(function (ctx) { return ctx.onSuccess(ctx.cancelToken); });\r\n}\r\nexport var defaultCancellationToken = { isCancelled: false };\r\nexport function catchAsync(work) {\r\n    return protectedCont(function (ctx) {\r\n        work({\r\n            onSuccess: function (x) { return ctx.onSuccess(choice1Of2(x)); },\r\n            onError: function (ex) { return ctx.onSuccess(choice2Of2(ex)); },\r\n            onCancel: ctx.onCancel,\r\n            cancelToken: ctx.cancelToken,\r\n            trampoline: ctx.trampoline\r\n        });\r\n    });\r\n}\r\nexport function fromContinuations(f) {\r\n    return protectedCont(function (ctx) { return f([ctx.onSuccess, ctx.onError, ctx.onCancel]); });\r\n}\r\nexport function ignore(computation) {\r\n    return protectedBind(computation, function (x) { return protectedReturn(void 0); });\r\n}\r\nexport function parallel(computations) {\r\n    return awaitPromise(Promise.all(map(function (w) { return startAsPromise(w); }, computations)));\r\n}\r\nexport function sleep(millisecondsDueTime) {\r\n    return protectedCont(function (ctx) {\r\n        setTimeout(function () { return ctx.cancelToken.isCancelled ? ctx.onCancel(\"cancelled\") : ctx.onSuccess(void 0); }, millisecondsDueTime);\r\n    });\r\n}\r\nexport function start(computation, cancellationToken) {\r\n    return startWithContinuations(computation, cancellationToken);\r\n}\r\nexport function startImmediate(computation, cancellationToken) {\r\n    return start(computation, cancellationToken);\r\n}\r\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\r\n    if (typeof continuation !== \"function\") {\r\n        cancelToken = continuation;\r\n        continuation = null;\r\n    }\r\n    var trampoline = new Trampoline();\r\n    computation({\r\n        onSuccess: continuation ? continuation : emptyContinuation,\r\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\r\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\r\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\r\n        trampoline: trampoline\r\n    });\r\n}\r\nexport function startAsPromise(computation, cancellationToken) {\r\n    return new Promise(function (resolve, reject) {\r\n        return startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken);\r\n    });\r\n}\r\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { setType } from \"fable-core/Symbol\";\nimport _Symbol from \"fable-core/Symbol\";\nimport { compareUnions, equalsUnions, GenericParam } from \"fable-core/Util\";\nexport var Result = function () {\n    function Result(caseName, fields) {\n        _classCallCheck(this, Result);\n\n        this.Case = caseName;\n        this.Fields = fields;\n    }\n\n    _createClass(Result, [{\n        key: _Symbol.reflection,\n        value: function () {\n            return {\n                type: \"Fable.PowerPack.Result.Result\",\n                interfaces: [\"FSharpUnion\", \"System.IEquatable\", \"System.IComparable\"],\n                cases: {\n                    Error: [GenericParam(\"B\")],\n                    Ok: [GenericParam(\"A\")]\n                }\n            };\n        }\n    }, {\n        key: \"Equals\",\n        value: function (other) {\n            return equalsUnions(this, other);\n        }\n    }, {\n        key: \"CompareTo\",\n        value: function (other) {\n            return compareUnions(this, other);\n        }\n    }]);\n\n    return Result;\n}();\nsetType(\"Fable.PowerPack.Result.Result\", Result);\nexport function unwrapResult(a) {\n    if (a.Case === \"Error\") {\n        throw a.Fields[0];\n    } else {\n        return a.Fields[0];\n    }\n}\nexport function map(fn, a) {\n    if (a.Case === \"Error\") {\n        return new Result(\"Error\", [a.Fields[0]]);\n    } else {\n        return new Result(\"Ok\", [fn(a.Fields[0])]);\n    }\n}\nexport function bind(fn, a) {\n    if (a.Case === \"Error\") {\n        return new Result(\"Error\", [a.Fields[0]]);\n    } else {\n        return fn(a.Fields[0]);\n    }\n}\nexport var ResultBuilder = function () {\n    _createClass(ResultBuilder, [{\n        key: _Symbol.reflection,\n        value: function () {\n            return {\n                type: \"Fable.PowerPack.Result.ResultBuilder\",\n                properties: {\n                    Zero: \"function\"\n                }\n            };\n        }\n    }]);\n\n    function ResultBuilder() {\n        _classCallCheck(this, ResultBuilder);\n    }\n\n    _createClass(ResultBuilder, [{\n        key: \"Bind\",\n        value: function (m, f) {\n            return bind(f, m);\n        }\n    }, {\n        key: \"Return\",\n        value: function (a) {\n            return new Result(\"Ok\", [a]);\n        }\n    }, {\n        key: \"ReturnFrom\",\n        value: function (m) {\n            return m;\n        }\n    }, {\n        key: \"Combine\",\n        value: function (left, right) {\n            return this.Bind(left, function () {\n                return right;\n            });\n        }\n    }, {\n        key: \"Zero\",\n        get: function () {\n            var _this = this;\n\n            return function (arg00) {\n                return _this.Return(arg00);\n            };\n        }\n    }]);\n\n    return ResultBuilder;\n}();\nsetType(\"Fable.PowerPack.Result.ResultBuilder\", ResultBuilder);\nexport var result = new ResultBuilder();\n//# sourceMappingURL=Result.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { map, Result } from \"./Result\";\nimport { setType } from \"fable-core/Symbol\";\nimport _Symbol from \"fable-core/Symbol\";\n\nvar _Promise = function (__exports) {\n    var result = __exports.result = function (a) {\n        return a.then(function (arg0) {\n            return new Result(\"Ok\", [arg0]);\n        }, function (arg0_1) {\n            return new Result(\"Error\", [arg0_1]);\n        });\n    };\n\n    var mapResult = __exports.mapResult = function (fn, a) {\n        return a.then(function (a_1) {\n            return map(fn, a_1);\n        });\n    };\n\n    var bindResult = __exports.bindResult = function (fn, a) {\n        return a.then(function (a_1) {\n            return a_1.Case === \"Error\" ? Promise.resolve(new Result(\"Error\", [a_1.Fields[0]])) : result(fn(a_1.Fields[0]));\n        });\n    };\n\n    var PromiseBuilder = __exports.PromiseBuilder = function () {\n        _createClass(PromiseBuilder, [{\n            key: _Symbol.reflection,\n            value: function () {\n                return {\n                    type: \"Fable.PowerPack.Promise.PromiseBuilder\",\n                    properties: {}\n                };\n            }\n        }]);\n\n        function PromiseBuilder() {\n            _classCallCheck(this, PromiseBuilder);\n        }\n\n        _createClass(PromiseBuilder, [{\n            key: \"For\",\n            value: function (seq, body) {\n                var p = Promise.resolve(null);\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    var _loop = function _loop() {\n                        var a = _step.value;\n                        p = p.then(function () {\n                            return body(a);\n                        });\n                    };\n\n                    for (var _iterator = seq[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        _loop();\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                return p;\n            }\n        }, {\n            key: \"While\",\n            value: function (guard, p) {\n                var _this = this;\n\n                if (guard(null)) {\n                    return p.then(function () {\n                        return _this.While(guard, p);\n                    });\n                } else {\n                    return Promise.resolve(null);\n                }\n            }\n        }, {\n            key: \"TryFinally\",\n            value: function (p, compensation) {\n                return p.then(function (x) {\n                    compensation(null);\n                    return x;\n                }, function (er) {\n                    compensation(null);\n                    throw er;\n                });\n            }\n        }, {\n            key: \"Delay\",\n            value: function (generator) {\n                return {\n                    then: function then(f1, f2) {\n                        try {\n                            return generator(null).then(f1, f2);\n                        } catch (er) {\n                            if (f2 == null) {\n                                return Promise.reject(er);\n                            } else {\n                                try {\n                                    return Promise.resolve(f2(er));\n                                } catch (er_1) {\n                                    return Promise.reject(er_1);\n                                }\n                            }\n                        }\n                    },\n                    catch: function _catch(f) {\n                        try {\n                            return generator(null).catch(f);\n                        } catch (er_2) {\n                            try {\n                                return Promise.resolve(f(er_2));\n                            } catch (er_3) {\n                                return Promise.reject(er_3);\n                            }\n                        }\n                    }\n                };\n            }\n        }, {\n            key: \"Using\",\n            value: function (resource, binder) {\n                return this.TryFinally(binder(resource), function () {\n                    resource.Dispose();\n                });\n            }\n        }]);\n\n        return PromiseBuilder;\n    }();\n\n    setType(\"Fable.PowerPack.Promise.PromiseBuilder\", PromiseBuilder);\n    return __exports;\n}({});\n\nexport { _Promise as Promise };\nexport var PromiseImpl = function (__exports) {\n    var promise = __exports.promise = new _Promise.PromiseBuilder();\n    return __exports;\n}({});\n//# sourceMappingURL=Promise.js.map","import List from \"./ListClass\";\r\nimport { ofArray as listOfArray } from \"./ListClass\";\r\nimport { toString } from \"./Util\";\r\nimport { equals } from \"./Util\";\r\nimport { compare } from \"./Util\";\r\nimport GenericComparer from \"./GenericComparer\";\r\nimport FSymbol from \"./Symbol\";\r\nimport { map as seqMap } from \"./Seq\";\r\nimport { fold as seqFold } from \"./Seq\";\r\nimport { pick as seqPick } from \"./Seq\";\r\nimport { tryPick as seqTryPick } from \"./Seq\";\r\nimport { compareWith as seqCompareWith } from \"./Seq\";\r\nexport function groupBy(f, xs) {\r\n    var keys = [], iter = xs[Symbol.iterator]();\r\n    var acc = create(), cur = iter.next();\r\n    while (!cur.done) {\r\n        var k = f(cur.value), vs = tryFind(k, acc);\r\n        if (vs == null) {\r\n            keys.push(k);\r\n            acc = add(k, [cur.value], acc);\r\n        }\r\n        else {\r\n            vs.push(cur.value);\r\n        }\r\n        cur = iter.next();\r\n    }\r\n    return keys.map(function (k) { return [k, acc.get(k)]; });\r\n}\r\nexport function countBy(f, xs) {\r\n    return groupBy(f, xs).map(function (kv) { return [kv[0], kv[1].length]; });\r\n}\r\nvar MapTree = (function () {\r\n    function MapTree(caseName, fields) {\r\n        this.Case = caseName;\r\n        this.Fields = fields;\r\n    }\r\n    return MapTree;\r\n}());\r\nexport { MapTree };\r\nfunction tree_sizeAux(acc, m) {\r\n    return m.Case === \"MapOne\"\r\n        ? acc + 1\r\n        : m.Case === \"MapNode\"\r\n            ? tree_sizeAux(tree_sizeAux(acc + 1, m.Fields[2]), m.Fields[3])\r\n            : acc;\r\n}\r\nfunction tree_size(x) {\r\n    return tree_sizeAux(0, x);\r\n}\r\nfunction tree_empty() {\r\n    return new MapTree(\"MapEmpty\", []);\r\n}\r\nfunction tree_height(_arg1) {\r\n    return _arg1.Case === \"MapOne\" ? 1 : _arg1.Case === \"MapNode\" ? _arg1.Fields[4] : 0;\r\n}\r\nfunction tree_isEmpty(m) {\r\n    return m.Case === \"MapEmpty\" ? true : false;\r\n}\r\nfunction tree_mk(l, k, v, r) {\r\n    var matchValue = [l, r];\r\n    var $target1 = function () {\r\n        var hl = tree_height(l);\r\n        var hr = tree_height(r);\r\n        var m = hl < hr ? hr : hl;\r\n        return new MapTree(\"MapNode\", [k, v, l, r, m + 1]);\r\n    };\r\n    if (matchValue[0].Case === \"MapEmpty\") {\r\n        if (matchValue[1].Case === \"MapEmpty\") {\r\n            return new MapTree(\"MapOne\", [k, v]);\r\n        }\r\n        else {\r\n            return $target1();\r\n        }\r\n    }\r\n    else {\r\n        return $target1();\r\n    }\r\n}\r\n;\r\nfunction tree_rebalance(t1, k, v, t2) {\r\n    var t1h = tree_height(t1);\r\n    var t2h = tree_height(t2);\r\n    if (t2h > t1h + 2) {\r\n        if (t2.Case === \"MapNode\") {\r\n            if (tree_height(t2.Fields[2]) > t1h + 1) {\r\n                if (t2.Fields[2].Case === \"MapNode\") {\r\n                    return tree_mk(tree_mk(t1, k, v, t2.Fields[2].Fields[2]), t2.Fields[2].Fields[0], t2.Fields[2].Fields[1], tree_mk(t2.Fields[2].Fields[3], t2.Fields[0], t2.Fields[1], t2.Fields[3]));\r\n                }\r\n                else {\r\n                    throw new Error(\"rebalance\");\r\n                }\r\n            }\r\n            else {\r\n                return tree_mk(tree_mk(t1, k, v, t2.Fields[2]), t2.Fields[0], t2.Fields[1], t2.Fields[3]);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"rebalance\");\r\n        }\r\n    }\r\n    else {\r\n        if (t1h > t2h + 2) {\r\n            if (t1.Case === \"MapNode\") {\r\n                if (tree_height(t1.Fields[3]) > t2h + 1) {\r\n                    if (t1.Fields[3].Case === \"MapNode\") {\r\n                        return tree_mk(tree_mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], t1.Fields[3].Fields[2]), t1.Fields[3].Fields[0], t1.Fields[3].Fields[1], tree_mk(t1.Fields[3].Fields[3], k, v, t2));\r\n                    }\r\n                    else {\r\n                        throw new Error(\"rebalance\");\r\n                    }\r\n                }\r\n                else {\r\n                    return tree_mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], tree_mk(t1.Fields[3], k, v, t2));\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(\"rebalance\");\r\n            }\r\n        }\r\n        else {\r\n            return tree_mk(t1, k, v, t2);\r\n        }\r\n    }\r\n}\r\nfunction tree_add(comparer, k, v, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return new MapTree(\"MapNode\", [k, v, new MapTree(\"MapEmpty\", []), m, 2]);\r\n        }\r\n        else if (c === 0) {\r\n            return new MapTree(\"MapOne\", [k, v]);\r\n        }\r\n        return new MapTree(\"MapNode\", [k, v, m, new MapTree(\"MapEmpty\", []), 2]);\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_add(comparer, k, v, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\r\n        }\r\n        else if (c === 0) {\r\n            return new MapTree(\"MapNode\", [k, v, m.Fields[2], m.Fields[3], m.Fields[4]]);\r\n        }\r\n        return tree_rebalance(m.Fields[2], m.Fields[0], m.Fields[1], tree_add(comparer, k, v, m.Fields[3]));\r\n    }\r\n    return new MapTree(\"MapOne\", [k, v]);\r\n}\r\nfunction tree_find(comparer, k, m) {\r\n    var res = tree_tryFind(comparer, k, m);\r\n    if (res != null)\r\n        return res;\r\n    throw new Error(\"key not found\");\r\n}\r\nfunction tree_tryFind(comparer, k, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        return c === 0 ? m.Fields[1] : null;\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_tryFind(comparer, k, m.Fields[2]);\r\n        }\r\n        else {\r\n            if (c === 0) {\r\n                return m.Fields[1];\r\n            }\r\n            else {\r\n                return tree_tryFind(comparer, k, m.Fields[3]);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction tree_partition1(comparer, f, k, v, acc1, acc2) {\r\n    return f(k, v) ? [tree_add(comparer, k, v, acc1), acc2] : [acc1, tree_add(comparer, k, v, acc2)];\r\n}\r\nfunction tree_partitionAux(comparer, f, s, acc_0, acc_1) {\r\n    var acc = [acc_0, acc_1];\r\n    if (s.Case === \"MapOne\") {\r\n        return tree_partition1(comparer, f, s.Fields[0], s.Fields[1], acc[0], acc[1]);\r\n    }\r\n    else if (s.Case === \"MapNode\") {\r\n        var acc_2 = tree_partitionAux(comparer, f, s.Fields[3], acc[0], acc[1]);\r\n        var acc_3 = tree_partition1(comparer, f, s.Fields[0], s.Fields[1], acc_2[0], acc_2[1]);\r\n        return tree_partitionAux(comparer, f, s.Fields[2], acc_3[0], acc_3[1]);\r\n    }\r\n    return acc;\r\n}\r\nfunction tree_partition(comparer, f, s) {\r\n    return tree_partitionAux(comparer, f, s, tree_empty(), tree_empty());\r\n}\r\nfunction tree_filter1(comparer, f, k, v, acc) {\r\n    return f(k, v) ? tree_add(comparer, k, v, acc) : acc;\r\n}\r\nfunction tree_filterAux(comparer, f, s, acc) {\r\n    return s.Case === \"MapOne\" ? tree_filter1(comparer, f, s.Fields[0], s.Fields[1], acc) : s.Case === \"MapNode\" ? tree_filterAux(comparer, f, s.Fields[3], tree_filter1(comparer, f, s.Fields[0], s.Fields[1], tree_filterAux(comparer, f, s.Fields[2], acc))) : acc;\r\n}\r\nfunction tree_filter(comparer, f, s) {\r\n    return tree_filterAux(comparer, f, s, tree_empty());\r\n}\r\nfunction tree_spliceOutSuccessor(m) {\r\n    if (m.Case === \"MapOne\") {\r\n        return [m.Fields[0], m.Fields[1], new MapTree(\"MapEmpty\", [])];\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        if (m.Fields[2].Case === \"MapEmpty\") {\r\n            return [m.Fields[0], m.Fields[1], m.Fields[3]];\r\n        }\r\n        else {\r\n            var kvl = tree_spliceOutSuccessor(m.Fields[2]);\r\n            return [kvl[0], kvl[1], tree_mk(kvl[2], m.Fields[0], m.Fields[1], m.Fields[3])];\r\n        }\r\n    }\r\n    throw new Error(\"internal error: Map.spliceOutSuccessor\");\r\n}\r\nfunction tree_remove(comparer, k, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c === 0) {\r\n            return new MapTree(\"MapEmpty\", []);\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_remove(comparer, k, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\r\n        }\r\n        else {\r\n            if (c === 0) {\r\n                var matchValue = [m.Fields[2], m.Fields[3]];\r\n                if (matchValue[0].Case === \"MapEmpty\") {\r\n                    return m.Fields[3];\r\n                }\r\n                else {\r\n                    if (matchValue[1].Case === \"MapEmpty\") {\r\n                        return m.Fields[2];\r\n                    }\r\n                    else {\r\n                        var patternInput = tree_spliceOutSuccessor(m.Fields[3]);\r\n                        var sv = patternInput[1];\r\n                        var sk = patternInput[0];\r\n                        var r_ = patternInput[2];\r\n                        return tree_mk(m.Fields[2], sk, sv, r_);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return tree_rebalance(m.Fields[2], m.Fields[0], m.Fields[1], tree_remove(comparer, k, m.Fields[3]));\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return tree_empty();\r\n    }\r\n}\r\nfunction tree_mem(comparer, k, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        return comparer.Compare(k, m.Fields[0]) === 0;\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_mem(comparer, k, m.Fields[2]);\r\n        }\r\n        else {\r\n            if (c === 0) {\r\n                return true;\r\n            }\r\n            else {\r\n                return tree_mem(comparer, k, m.Fields[3]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nfunction tree_iter(f, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        f(m.Fields[0], m.Fields[1]);\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        tree_iter(f, m.Fields[2]);\r\n        f(m.Fields[0], m.Fields[1]);\r\n        tree_iter(f, m.Fields[3]);\r\n    }\r\n}\r\nfunction tree_tryPick(f, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        return f(m.Fields[0], m.Fields[1]);\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var matchValue = tree_tryPick(f, m.Fields[2]);\r\n        if (matchValue == null) {\r\n            var matchValue_1 = f(m.Fields[0], m.Fields[1]);\r\n            if (matchValue_1 == null) {\r\n                return tree_tryPick(f, m.Fields[3]);\r\n            }\r\n            else {\r\n                var res = matchValue_1;\r\n                return res;\r\n            }\r\n        }\r\n        else {\r\n            var res = matchValue;\r\n            return res;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nfunction tree_exists(f, m) {\r\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (tree_exists(f, m.Fields[2]) ? true : f(m.Fields[0], m.Fields[1])) ? true : tree_exists(f, m.Fields[3]) : false;\r\n}\r\nfunction tree_forall(f, m) {\r\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (tree_forall(f, m.Fields[2]) ? f(m.Fields[0], m.Fields[1]) : false) ? tree_forall(f, m.Fields[3]) : false : true;\r\n}\r\nfunction tree_mapi(f, m) {\r\n    return m.Case === \"MapOne\" ? new MapTree(\"MapOne\", [m.Fields[0], f(m.Fields[0], m.Fields[1])]) : m.Case === \"MapNode\" ? new MapTree(\"MapNode\", [m.Fields[0], f(m.Fields[0], m.Fields[1]), tree_mapi(f, m.Fields[2]), tree_mapi(f, m.Fields[3]), m.Fields[4]]) : tree_empty();\r\n}\r\nfunction tree_foldBack(f, m, x) {\r\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1], x) : m.Case === \"MapNode\" ? tree_foldBack(f, m.Fields[2], f(m.Fields[0], m.Fields[1], tree_foldBack(f, m.Fields[3], x))) : x;\r\n}\r\nfunction tree_fold(f, x, m) {\r\n    return m.Case === \"MapOne\" ? f(x, m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? tree_fold(f, f(tree_fold(f, x, m.Fields[2]), m.Fields[0], m.Fields[1]), m.Fields[3]) : x;\r\n}\r\nfunction tree_mkFromEnumerator(comparer, acc, e) {\r\n    var cur = e.next();\r\n    while (!cur.done) {\r\n        acc = tree_add(comparer, cur.value[0], cur.value[1], acc);\r\n        cur = e.next();\r\n    }\r\n    return acc;\r\n}\r\nfunction tree_ofSeq(comparer, c) {\r\n    var ie = c[Symbol.iterator]();\r\n    return tree_mkFromEnumerator(comparer, tree_empty(), ie);\r\n}\r\nfunction tree_collapseLHS(stack) {\r\n    if (stack.tail != null) {\r\n        if (stack.head.Case === \"MapOne\") {\r\n            return stack;\r\n        }\r\n        else if (stack.head.Case === \"MapNode\") {\r\n            return tree_collapseLHS(listOfArray([\r\n                stack.head.Fields[2],\r\n                new MapTree(\"MapOne\", [stack.head.Fields[0], stack.head.Fields[1]]),\r\n                stack.head.Fields[3]\r\n            ], stack.tail));\r\n        }\r\n        else {\r\n            return tree_collapseLHS(stack.tail);\r\n        }\r\n    }\r\n    else {\r\n        return new List();\r\n    }\r\n}\r\nfunction tree_mkIterator(s) {\r\n    return { stack: tree_collapseLHS(new List(s, new List())), started: false };\r\n}\r\nfunction tree_moveNext(i) {\r\n    function current(i) {\r\n        if (i.stack.tail == null) {\r\n            return null;\r\n        }\r\n        else if (i.stack.head.Case === \"MapOne\") {\r\n            return [i.stack.head.Fields[0], i.stack.head.Fields[1]];\r\n        }\r\n        throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\r\n    }\r\n    if (i.started) {\r\n        if (i.stack.tail == null) {\r\n            return { done: true, value: null };\r\n        }\r\n        else {\r\n            if (i.stack.head.Case === \"MapOne\") {\r\n                i.stack = tree_collapseLHS(i.stack.tail);\r\n                return {\r\n                    done: i.stack.tail == null,\r\n                    value: current(i)\r\n                };\r\n            }\r\n            else {\r\n                throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return {\r\n            done: i.stack.tail == null,\r\n            value: current(i)\r\n        };\r\n    }\r\n    ;\r\n}\r\nvar FableMap = (function () {\r\n    function FableMap() {\r\n    }\r\n    FableMap.prototype.ToString = function () {\r\n        return \"map [\" + Array.from(this).map(toString).join(\"; \") + \"]\";\r\n    };\r\n    FableMap.prototype.Equals = function (m2) {\r\n        return this.CompareTo(m2) === 0;\r\n    };\r\n    FableMap.prototype.CompareTo = function (m2) {\r\n        var _this = this;\r\n        return this === m2 ? 0 : seqCompareWith(function (kvp1, kvp2) {\r\n            var c = _this.comparer.Compare(kvp1[0], kvp2[0]);\r\n            return c !== 0 ? c : compare(kvp1[1], kvp2[1]);\r\n        }, this, m2);\r\n    };\r\n    FableMap.prototype[Symbol.iterator] = function () {\r\n        var i = tree_mkIterator(this.tree);\r\n        return {\r\n            next: function () { return tree_moveNext(i); }\r\n        };\r\n    };\r\n    FableMap.prototype.entries = function () {\r\n        return this[Symbol.iterator]();\r\n    };\r\n    FableMap.prototype.keys = function () {\r\n        return seqMap(function (kv) { return kv[0]; }, this);\r\n    };\r\n    FableMap.prototype.values = function () {\r\n        return seqMap(function (kv) { return kv[1]; }, this);\r\n    };\r\n    FableMap.prototype.get = function (k) {\r\n        return tree_find(this.comparer, k, this.tree);\r\n    };\r\n    FableMap.prototype.has = function (k) {\r\n        return tree_mem(this.comparer, k, this.tree);\r\n    };\r\n    FableMap.prototype.set = function (k, v) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableMap.prototype.delete = function (k) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableMap.prototype.clear = function () {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    Object.defineProperty(FableMap.prototype, \"size\", {\r\n        get: function () {\r\n            return tree_size(this.tree);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FableMap.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Collections.FSharpMap\",\r\n            interfaces: [\"System.IEquatable\", \"System.IComparable\", \"System.Collections.Generic.IDictionary\"]\r\n        };\r\n    };\r\n    return FableMap;\r\n}());\r\nexport default FableMap;\r\nfunction from(comparer, tree) {\r\n    var map = new FableMap();\r\n    map.tree = tree;\r\n    map.comparer = comparer || new GenericComparer();\r\n    return map;\r\n}\r\nexport function create(ie, comparer) {\r\n    comparer = comparer || new GenericComparer();\r\n    return from(comparer, ie ? tree_ofSeq(comparer, ie) : tree_empty());\r\n}\r\nexport function add(k, v, map) {\r\n    return from(map.comparer, tree_add(map.comparer, k, v, map.tree));\r\n}\r\nexport function remove(item, map) {\r\n    return from(map.comparer, tree_remove(map.comparer, item, map.tree));\r\n}\r\nexport function containsValue(v, map) {\r\n    return seqFold(function (acc, k) { return acc || equals(map.get(k), v); }, false, map.keys());\r\n}\r\nexport function tryGetValue(map, key, defaultValue) {\r\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\r\n}\r\nexport function exists(f, map) {\r\n    return tree_exists(f, map.tree);\r\n}\r\nexport function find(k, map) {\r\n    return tree_find(map.comparer, k, map.tree);\r\n}\r\nexport function tryFind(k, map) {\r\n    return tree_tryFind(map.comparer, k, map.tree);\r\n}\r\nexport function filter(f, map) {\r\n    return from(map.comparer, tree_filter(map.comparer, f, map.tree));\r\n}\r\nexport function fold(f, seed, map) {\r\n    return tree_fold(f, seed, map.tree);\r\n}\r\nexport function foldBack(f, map, seed) {\r\n    return tree_foldBack(f, map.tree, seed);\r\n}\r\nexport function forAll(f, map) {\r\n    return tree_forall(f, map.tree);\r\n}\r\nexport function isEmpty(map) {\r\n    return tree_isEmpty(map.tree);\r\n}\r\nexport function iterate(f, map) {\r\n    tree_iter(f, map.tree);\r\n}\r\nexport function map(f, map) {\r\n    return from(map.comparer, tree_mapi(f, map.tree));\r\n}\r\nexport function partition(f, map) {\r\n    var rs = tree_partition(map.comparer, f, map.tree);\r\n    return [from(map.comparer, rs[0]), from(map.comparer, rs[1])];\r\n}\r\nexport function findKey(f, map) {\r\n    return seqPick(function (kv) { return f(kv[0], kv[1]) ? kv[0] : null; }, map);\r\n}\r\nexport function tryFindKey(f, map) {\r\n    return seqTryPick(function (kv) { return f(kv[0], kv[1]) ? kv[0] : null; }, map);\r\n}\r\nexport function pick(f, map) {\r\n    var res = tryPick(f, map);\r\n    if (res != null)\r\n        return res;\r\n    throw new Error(\"key not found\");\r\n}\r\nexport function tryPick(f, map) {\r\n    return tree_tryPick(f, map.tree);\r\n}\r\n","import List from \"./List\";\r\nimport { ofArray as listOfArray } from \"./List\";\r\nimport { toString } from \"./Util\";\r\nimport GenericComparer from \"./GenericComparer\";\r\nimport FSymbol from \"./Symbol\";\r\nimport { iterate as seqIterate } from \"./Seq\";\r\nimport { fold as seqFold } from \"./Seq\";\r\nimport { reduce as seqReduce } from \"./Seq\";\r\nimport { forAll as seqForAll } from \"./Seq\";\r\nimport { exists as seqExists } from \"./Seq\";\r\nimport { choose as seqChoose } from \"./Seq\";\r\nimport { scan as seqScan } from \"./Seq\";\r\nexport function distinctBy(f, xs) {\r\n    return seqChoose(function (tup) { return tup[0]; }, seqScan(function (tup, x) {\r\n        var acc = tup[1];\r\n        var k = f(x);\r\n        return acc.has(k) ? [null, acc] : [x, add(k, acc)];\r\n    }, [null, create()], xs));\r\n}\r\nexport function distinct(xs) {\r\n    return distinctBy(function (x) { return x; }, xs);\r\n}\r\nvar SetTree = (function () {\r\n    function SetTree(caseName, fields) {\r\n        this.Case = caseName;\r\n        this.Fields = fields;\r\n    }\r\n    return SetTree;\r\n}());\r\nexport { SetTree };\r\nvar tree_tolerance = 2;\r\nfunction tree_countAux(s, acc) {\r\n    return s.Case === \"SetOne\" ? acc + 1 : s.Case === \"SetEmpty\" ? acc : tree_countAux(s.Fields[1], tree_countAux(s.Fields[2], acc + 1));\r\n}\r\nfunction tree_count(s) {\r\n    return tree_countAux(s, 0);\r\n}\r\nfunction tree_SetOne(n) {\r\n    return new SetTree(\"SetOne\", [n]);\r\n}\r\nfunction tree_SetNode(x, l, r, h) {\r\n    return new SetTree(\"SetNode\", [x, l, r, h]);\r\n}\r\nfunction tree_height(t) {\r\n    return t.Case === \"SetOne\" ? 1 : t.Case === \"SetNode\" ? t.Fields[3] : 0;\r\n}\r\nfunction tree_mk(l, k, r) {\r\n    var matchValue = [l, r];\r\n    var $target1 = function () {\r\n        var hl = tree_height(l);\r\n        var hr = tree_height(r);\r\n        var m = hl < hr ? hr : hl;\r\n        return tree_SetNode(k, l, r, m + 1);\r\n    };\r\n    if (matchValue[0].Case === \"SetEmpty\") {\r\n        if (matchValue[1].Case === \"SetEmpty\") {\r\n            return tree_SetOne(k);\r\n        }\r\n        else {\r\n            return $target1();\r\n        }\r\n    }\r\n    else {\r\n        return $target1();\r\n    }\r\n}\r\nfunction tree_rebalance(t1, k, t2) {\r\n    var t1h = tree_height(t1);\r\n    var t2h = tree_height(t2);\r\n    if (t2h > t1h + tree_tolerance) {\r\n        if (t2.Case === \"SetNode\") {\r\n            if (tree_height(t2.Fields[1]) > t1h + 1) {\r\n                if (t2.Fields[1].Case === \"SetNode\") {\r\n                    return tree_mk(tree_mk(t1, k, t2.Fields[1].Fields[1]), t2.Fields[1].Fields[0], tree_mk(t2.Fields[1].Fields[2], t2.Fields[0], t2.Fields[2]));\r\n                }\r\n                else {\r\n                    throw new Error(\"rebalance\");\r\n                }\r\n            }\r\n            else {\r\n                return tree_mk(tree_mk(t1, k, t2.Fields[1]), t2.Fields[0], t2.Fields[2]);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"rebalance\");\r\n        }\r\n    }\r\n    else {\r\n        if (t1h > t2h + tree_tolerance) {\r\n            if (t1.Case === \"SetNode\") {\r\n                if (tree_height(t1.Fields[2]) > t2h + 1) {\r\n                    if (t1.Fields[2].Case === \"SetNode\") {\r\n                        return tree_mk(tree_mk(t1.Fields[1], t1.Fields[0], t1.Fields[2].Fields[1]), t1.Fields[2].Fields[0], tree_mk(t1.Fields[2].Fields[2], k, t2));\r\n                    }\r\n                    else {\r\n                        throw new Error(\"rebalance\");\r\n                    }\r\n                }\r\n                else {\r\n                    return tree_mk(t1.Fields[1], t1.Fields[0], tree_mk(t1.Fields[2], k, t2));\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(\"rebalance\");\r\n            }\r\n        }\r\n        else {\r\n            return tree_mk(t1, k, t2);\r\n        }\r\n    }\r\n}\r\nfunction tree_add(comparer, k, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_SetNode(k, new SetTree(\"SetEmpty\", []), t, 2);\r\n        }\r\n        else if (c === 0) {\r\n            return t;\r\n        }\r\n        else {\r\n            return tree_SetNode(k, t, new SetTree(\"SetEmpty\", []), 2);\r\n        }\r\n    }\r\n    else if (t.Case === \"SetEmpty\") {\r\n        return tree_SetOne(k);\r\n    }\r\n    else {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_add(comparer, k, t.Fields[1]), t.Fields[0], t.Fields[2]);\r\n        }\r\n        else if (c === 0) {\r\n            return t;\r\n        }\r\n        else {\r\n            return tree_rebalance(t.Fields[1], t.Fields[0], tree_add(comparer, k, t.Fields[2]));\r\n        }\r\n    }\r\n}\r\nfunction tree_balance(comparer, t1, k, t2) {\r\n    var matchValue = [t1, t2];\r\n    var $target1 = function (t1_1) { return tree_add(comparer, k, t1_1); };\r\n    var $target2 = function (k1, t2_1) { return tree_add(comparer, k, tree_add(comparer, k1, t2_1)); };\r\n    if (matchValue[0].Case === \"SetOne\") {\r\n        if (matchValue[1].Case === \"SetEmpty\") {\r\n            return $target1(matchValue[0]);\r\n        }\r\n        else {\r\n            if (matchValue[1].Case === \"SetOne\") {\r\n                return $target2(matchValue[0].Fields[0], matchValue[1]);\r\n            }\r\n            else {\r\n                return $target2(matchValue[0].Fields[0], matchValue[1]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (matchValue[0].Case === \"SetNode\") {\r\n            if (matchValue[1].Case === \"SetOne\") {\r\n                var k2 = matchValue[1].Fields[0];\r\n                var t1_1 = matchValue[0];\r\n                return tree_add(comparer, k, tree_add(comparer, k2, t1_1));\r\n            }\r\n            else {\r\n                if (matchValue[1].Case === \"SetNode\") {\r\n                    var h1 = matchValue[0].Fields[3];\r\n                    var h2 = matchValue[1].Fields[3];\r\n                    var k1 = matchValue[0].Fields[0];\r\n                    var k2 = matchValue[1].Fields[0];\r\n                    var t11 = matchValue[0].Fields[1];\r\n                    var t12 = matchValue[0].Fields[2];\r\n                    var t21 = matchValue[1].Fields[1];\r\n                    var t22 = matchValue[1].Fields[2];\r\n                    if (h1 + tree_tolerance < h2) {\r\n                        return tree_rebalance(tree_balance(comparer, t1, k, t21), k2, t22);\r\n                    }\r\n                    else {\r\n                        if (h2 + tree_tolerance < h1) {\r\n                            return tree_rebalance(t11, k1, tree_balance(comparer, t12, k, t2));\r\n                        }\r\n                        else {\r\n                            return tree_mk(t1, k, t2);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    return $target1(matchValue[0]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var t2_1 = matchValue[1];\r\n            return tree_add(comparer, k, t2_1);\r\n        }\r\n    }\r\n}\r\nfunction tree_split(comparer, pivot, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        var c = comparer.Compare(t.Fields[0], pivot);\r\n        if (c < 0) {\r\n            return [t, false, new SetTree(\"SetEmpty\", [])];\r\n        }\r\n        else if (c === 0) {\r\n            return [new SetTree(\"SetEmpty\", []), true, new SetTree(\"SetEmpty\", [])];\r\n        }\r\n        else {\r\n            return [new SetTree(\"SetEmpty\", []), false, t];\r\n        }\r\n    }\r\n    else if (t.Case === \"SetEmpty\") {\r\n        return [new SetTree(\"SetEmpty\", []), false, new SetTree(\"SetEmpty\", [])];\r\n    }\r\n    else {\r\n        var c = comparer.Compare(pivot, t.Fields[0]);\r\n        if (c < 0) {\r\n            var patternInput = tree_split(comparer, pivot, t.Fields[1]);\r\n            return [patternInput[0], patternInput[1], tree_balance(comparer, patternInput[2], t.Fields[0], t.Fields[2])];\r\n        }\r\n        else if (c === 0) {\r\n            return [t.Fields[1], true, t.Fields[2]];\r\n        }\r\n        else {\r\n            var patternInput = tree_split(comparer, pivot, t.Fields[2]);\r\n            return [tree_balance(comparer, t.Fields[1], t.Fields[0], patternInput[0]), patternInput[1], patternInput[2]];\r\n        }\r\n    }\r\n}\r\nfunction tree_spliceOutSuccessor(t) {\r\n    if (t.Case === \"SetOne\") {\r\n        return [t.Fields[0], new SetTree(\"SetEmpty\", [])];\r\n    }\r\n    else if (t.Case === \"SetNode\") {\r\n        if (t.Fields[1].Case === \"SetEmpty\") {\r\n            return [t.Fields[0], t.Fields[2]];\r\n        }\r\n        else {\r\n            var patternInput = tree_spliceOutSuccessor(t.Fields[1]);\r\n            return [patternInput[0], tree_mk(patternInput[1], t.Fields[0], t.Fields[2])];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\r\n    }\r\n}\r\nfunction tree_remove(comparer, k, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c === 0) {\r\n            return new SetTree(\"SetEmpty\", []);\r\n        }\r\n        else {\r\n            return t;\r\n        }\r\n    }\r\n    else if (t.Case === \"SetNode\") {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_remove(comparer, k, t.Fields[1]), t.Fields[0], t.Fields[2]);\r\n        }\r\n        else if (c === 0) {\r\n            var matchValue = [t.Fields[1], t.Fields[2]];\r\n            if (matchValue[0].Case === \"SetEmpty\") {\r\n                return t.Fields[2];\r\n            }\r\n            else if (matchValue[1].Case === \"SetEmpty\") {\r\n                return t.Fields[1];\r\n            }\r\n            else {\r\n                var patternInput = tree_spliceOutSuccessor(t.Fields[2]);\r\n                return tree_mk(t.Fields[1], patternInput[0], patternInput[1]);\r\n            }\r\n        }\r\n        else {\r\n            return tree_rebalance(t.Fields[1], t.Fields[0], tree_remove(comparer, k, t.Fields[2]));\r\n        }\r\n    }\r\n    else {\r\n        return t;\r\n    }\r\n}\r\nfunction tree_mem(comparer, k, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        return comparer.Compare(k, t.Fields[0]) === 0;\r\n    }\r\n    else if (t.Case === \"SetEmpty\") {\r\n        return false;\r\n    }\r\n    else {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_mem(comparer, k, t.Fields[1]);\r\n        }\r\n        else if (c === 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return tree_mem(comparer, k, t.Fields[2]);\r\n        }\r\n    }\r\n}\r\nfunction tree_iter(f, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        f(t.Fields[0]);\r\n    }\r\n    else {\r\n        if (t.Case === \"SetEmpty\") { }\r\n        else {\r\n            tree_iter(f, t.Fields[1]);\r\n            f(t.Fields[0]);\r\n            tree_iter(f, t.Fields[2]);\r\n        }\r\n    }\r\n}\r\nfunction tree_foldBack(f, m, x) {\r\n    return m.Case === \"SetOne\" ? f(m.Fields[0], x) : m.Case === \"SetEmpty\" ? x : tree_foldBack(f, m.Fields[1], f(m.Fields[0], tree_foldBack(f, m.Fields[2], x)));\r\n}\r\nfunction tree_fold(f, x, m) {\r\n    if (m.Case === \"SetOne\") {\r\n        return f(x, m.Fields[0]);\r\n    }\r\n    else if (m.Case === \"SetEmpty\") {\r\n        return x;\r\n    }\r\n    else {\r\n        var x_1 = tree_fold(f, x, m.Fields[1]);\r\n        var x_2 = f(x_1, m.Fields[0]);\r\n        return tree_fold(f, x_2, m.Fields[2]);\r\n    }\r\n}\r\nfunction tree_forall(f, m) {\r\n    return m.Case === \"SetOne\" ? f(m.Fields[0]) : m.Case === \"SetEmpty\" ? true : (f(m.Fields[0]) ? tree_forall(f, m.Fields[1]) : false) ? tree_forall(f, m.Fields[2]) : false;\r\n}\r\nfunction tree_exists(f, m) {\r\n    return m.Case === \"SetOne\" ? f(m.Fields[0]) : m.Case === \"SetEmpty\" ? false : (f(m.Fields[0]) ? true : tree_exists(f, m.Fields[1])) ? true : tree_exists(f, m.Fields[2]);\r\n}\r\nfunction tree_isEmpty(m) {\r\n    return m.Case === \"SetEmpty\" ? true : false;\r\n}\r\nfunction tree_subset(comparer, a, b) {\r\n    return tree_forall(function (x) { return tree_mem(comparer, x, b); }, a);\r\n}\r\nfunction tree_psubset(comparer, a, b) {\r\n    return tree_forall(function (x) { return tree_mem(comparer, x, b); }, a) ? tree_exists(function (x) { return !tree_mem(comparer, x, a); }, b) : false;\r\n}\r\nfunction tree_filterAux(comparer, f, s, acc) {\r\n    if (s.Case === \"SetOne\") {\r\n        if (f(s.Fields[0])) {\r\n            return tree_add(comparer, s.Fields[0], acc);\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }\r\n    else if (s.Case === \"SetEmpty\") {\r\n        return acc;\r\n    }\r\n    else {\r\n        var acc_1 = f(s.Fields[0]) ? tree_add(comparer, s.Fields[0], acc) : acc;\r\n        return tree_filterAux(comparer, f, s.Fields[1], tree_filterAux(comparer, f, s.Fields[2], acc_1));\r\n    }\r\n}\r\nfunction tree_filter(comparer, f, s) {\r\n    return tree_filterAux(comparer, f, s, new SetTree(\"SetEmpty\", []));\r\n}\r\nfunction tree_diffAux(comparer, m, acc) {\r\n    return m.Case === \"SetOne\" ? tree_remove(comparer, m.Fields[0], acc) : m.Case === \"SetEmpty\" ? acc : tree_diffAux(comparer, m.Fields[1], tree_diffAux(comparer, m.Fields[2], tree_remove(comparer, m.Fields[0], acc)));\r\n}\r\nfunction tree_diff(comparer, a, b) {\r\n    return tree_diffAux(comparer, b, a);\r\n}\r\nfunction tree_union(comparer, t1, t2) {\r\n    var matchValue = [t1, t2];\r\n    var $target2 = function (t) { return t; };\r\n    var $target3 = function (k1, t2_1) { return tree_add(comparer, k1, t2_1); };\r\n    if (matchValue[0].Case === \"SetEmpty\") {\r\n        var t = matchValue[1];\r\n        return t;\r\n    }\r\n    else {\r\n        if (matchValue[0].Case === \"SetOne\") {\r\n            if (matchValue[1].Case === \"SetEmpty\") {\r\n                return $target2(matchValue[0]);\r\n            }\r\n            else {\r\n                if (matchValue[1].Case === \"SetOne\") {\r\n                    return $target3(matchValue[0].Fields[0], matchValue[1]);\r\n                }\r\n                else {\r\n                    return $target3(matchValue[0].Fields[0], matchValue[1]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (matchValue[1].Case === \"SetEmpty\") {\r\n                return $target2(matchValue[0]);\r\n            }\r\n            else {\r\n                if (matchValue[1].Case === \"SetOne\") {\r\n                    var k2 = matchValue[1].Fields[0];\r\n                    var t1_1 = matchValue[0];\r\n                    return tree_add(comparer, k2, t1_1);\r\n                }\r\n                else {\r\n                    var h1 = matchValue[0].Fields[3];\r\n                    var h2 = matchValue[1].Fields[3];\r\n                    var k1 = matchValue[0].Fields[0];\r\n                    var k2 = matchValue[1].Fields[0];\r\n                    var t11 = matchValue[0].Fields[1];\r\n                    var t12 = matchValue[0].Fields[2];\r\n                    var t21 = matchValue[1].Fields[1];\r\n                    var t22 = matchValue[1].Fields[2];\r\n                    if (h1 > h2) {\r\n                        var patternInput = tree_split(comparer, k1, t2);\r\n                        var lo = patternInput[0];\r\n                        var hi = patternInput[2];\r\n                        return tree_balance(comparer, tree_union(comparer, t11, lo), k1, tree_union(comparer, t12, hi));\r\n                    }\r\n                    else {\r\n                        var patternInput = tree_split(comparer, k2, t1);\r\n                        var lo = patternInput[0];\r\n                        var hi = patternInput[2];\r\n                        return tree_balance(comparer, tree_union(comparer, t21, lo), k2, tree_union(comparer, t22, hi));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction tree_intersectionAux(comparer, b, m, acc) {\r\n    if (m.Case === \"SetOne\") {\r\n        if (tree_mem(comparer, m.Fields[0], b)) {\r\n            return tree_add(comparer, m.Fields[0], acc);\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }\r\n    else if (m.Case === \"SetEmpty\") {\r\n        return acc;\r\n    }\r\n    else {\r\n        var acc_1 = tree_intersectionAux(comparer, b, m.Fields[2], acc);\r\n        var acc_2 = tree_mem(comparer, m.Fields[0], b) ? tree_add(comparer, m.Fields[0], acc_1) : acc_1;\r\n        return tree_intersectionAux(comparer, b, m.Fields[1], acc_2);\r\n    }\r\n}\r\nfunction tree_intersection(comparer, a, b) {\r\n    return tree_intersectionAux(comparer, b, a, new SetTree(\"SetEmpty\", []));\r\n}\r\nfunction tree_partition1(comparer, f, k, acc1, acc2) {\r\n    return f(k) ? [tree_add(comparer, k, acc1), acc2] : [acc1, tree_add(comparer, k, acc2)];\r\n}\r\nfunction tree_partitionAux(comparer, f, s, acc_0, acc_1) {\r\n    var acc = [acc_0, acc_1];\r\n    if (s.Case === \"SetOne\") {\r\n        var acc1 = acc[0];\r\n        var acc2 = acc[1];\r\n        return tree_partition1(comparer, f, s.Fields[0], acc1, acc2);\r\n    }\r\n    else {\r\n        if (s.Case === \"SetEmpty\") {\r\n            return acc;\r\n        }\r\n        else {\r\n            var acc_2 = tree_partitionAux(comparer, f, s.Fields[2], acc[0], acc[1]);\r\n            var acc_3 = tree_partition1(comparer, f, s.Fields[0], acc_2[0], acc_2[1]);\r\n            return tree_partitionAux(comparer, f, s.Fields[1], acc_3[0], acc_3[1]);\r\n        }\r\n    }\r\n}\r\nfunction tree_partition(comparer, f, s) {\r\n    var seed = [new SetTree(\"SetEmpty\", []), new SetTree(\"SetEmpty\", [])];\r\n    var arg30_ = seed[0];\r\n    var arg31_ = seed[1];\r\n    return tree_partitionAux(comparer, f, s, arg30_, arg31_);\r\n}\r\nfunction tree_minimumElementAux(s, n) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? n : tree_minimumElementAux(s.Fields[1], s.Fields[0]);\r\n}\r\nfunction tree_minimumElementOpt(s) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? null : tree_minimumElementAux(s.Fields[1], s.Fields[0]);\r\n}\r\nfunction tree_maximumElementAux(s, n) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? n : tree_maximumElementAux(s.Fields[2], s.Fields[0]);\r\n}\r\nfunction tree_maximumElementOpt(s) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? null : tree_maximumElementAux(s.Fields[2], s.Fields[0]);\r\n}\r\nfunction tree_minimumElement(s) {\r\n    var matchValue = tree_minimumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw new Error(\"Set contains no elements\");\r\n    }\r\n    else {\r\n        return matchValue;\r\n    }\r\n}\r\nfunction tree_maximumElement(s) {\r\n    var matchValue = tree_maximumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw new Error(\"Set contains no elements\");\r\n    }\r\n    else {\r\n        return matchValue;\r\n    }\r\n}\r\nfunction tree_collapseLHS(stack) {\r\n    return stack.tail != null\r\n        ? stack.head.Case === \"SetOne\"\r\n            ? stack\r\n            : stack.head.Case === \"SetNode\"\r\n                ? tree_collapseLHS(listOfArray([\r\n                    stack.head.Fields[1],\r\n                    tree_SetOne(stack.head.Fields[0]),\r\n                    stack.head.Fields[2]\r\n                ], stack.tail))\r\n                : tree_collapseLHS(stack.tail)\r\n        : new List();\r\n}\r\nfunction tree_mkIterator(s) {\r\n    return { stack: tree_collapseLHS(new List(s, new List())), started: false };\r\n}\r\n;\r\nfunction tree_moveNext(i) {\r\n    function current(i) {\r\n        if (i.stack.tail == null) {\r\n            return null;\r\n        }\r\n        else if (i.stack.head.Case === \"SetOne\") {\r\n            return i.stack.head.Fields[0];\r\n        }\r\n        throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\r\n    }\r\n    if (i.started) {\r\n        if (i.stack.tail == null) {\r\n            return { done: true, value: null };\r\n        }\r\n        else {\r\n            if (i.stack.head.Case === \"SetOne\") {\r\n                i.stack = tree_collapseLHS(i.stack.tail);\r\n                return {\r\n                    done: i.stack.tail == null,\r\n                    value: current(i)\r\n                };\r\n            }\r\n            else {\r\n                throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return {\r\n            done: i.stack.tail == null,\r\n            value: current(i)\r\n        };\r\n    }\r\n    ;\r\n}\r\nfunction tree_compareStacks(comparer, l1, l2) {\r\n    var $target8 = function (n1k, t1) { return tree_compareStacks(comparer, listOfArray([new SetTree(\"SetEmpty\", []), tree_SetOne(n1k)], t1), l2); };\r\n    var $target9 = function (n1k, n1l, n1r, t1) { return tree_compareStacks(comparer, listOfArray([n1l, tree_SetNode(n1k, new SetTree(\"SetEmpty\", []), n1r, 0)], t1), l2); };\r\n    var $target11 = function (n2k, n2l, n2r, t2) { return tree_compareStacks(comparer, l1, listOfArray([n2l, tree_SetNode(n2k, new SetTree(\"SetEmpty\", []), n2r, 0)], t2)); };\r\n    if (l1.tail != null) {\r\n        if (l2.tail != null) {\r\n            if (l2.head.Case === \"SetOne\") {\r\n                if (l1.head.Case === \"SetOne\") {\r\n                    var n1k = l1.head.Fields[0], n2k = l2.head.Fields[0], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                    if (c !== 0) {\r\n                        return c;\r\n                    }\r\n                    else {\r\n                        return tree_compareStacks(comparer, t1, t2);\r\n                    }\r\n                }\r\n                else {\r\n                    if (l1.head.Case === \"SetNode\") {\r\n                        if (l1.head.Fields[1].Case === \"SetEmpty\") {\r\n                            var emp = l1.head.Fields[1], n1k = l1.head.Fields[0], n1r = l1.head.Fields[2], n2k = l2.head.Fields[0], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                            if (c !== 0) {\r\n                                return c;\r\n                            }\r\n                            else {\r\n                                return tree_compareStacks(comparer, listOfArray([n1r], t1), listOfArray([emp], t2));\r\n                            }\r\n                        }\r\n                        else {\r\n                            return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                        }\r\n                    }\r\n                    else {\r\n                        var n2k = l2.head.Fields[0], t2 = l2.tail;\r\n                        return tree_compareStacks(comparer, l1, listOfArray([new SetTree(\"SetEmpty\", []), tree_SetOne(n2k)], t2));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (l2.head.Case === \"SetNode\") {\r\n                    if (l2.head.Fields[1].Case === \"SetEmpty\") {\r\n                        if (l1.head.Case === \"SetOne\") {\r\n                            var n1k = l1.head.Fields[0], n2k = l2.head.Fields[0], n2r = l2.head.Fields[2], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                            if (c !== 0) {\r\n                                return c;\r\n                            }\r\n                            else {\r\n                                return tree_compareStacks(comparer, listOfArray([new SetTree(\"SetEmpty\", [])], t1), listOfArray([n2r], t2));\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (l1.head.Case === \"SetNode\") {\r\n                                if (l1.head.Fields[1].Case === \"SetEmpty\") {\r\n                                    var n1k = l1.head.Fields[0], n1r = l1.head.Fields[2], n2k = l2.head.Fields[0], n2r = l2.head.Fields[2], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                                    if (c !== 0) {\r\n                                        return c;\r\n                                    }\r\n                                    else {\r\n                                        return tree_compareStacks(comparer, listOfArray([n1r], t1), listOfArray([n2r], t2));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                                }\r\n                            }\r\n                            else {\r\n                                return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (l1.head.Case === \"SetOne\") {\r\n                            return $target8(l1.head.Fields[0], l1.tail);\r\n                        }\r\n                        else {\r\n                            if (l1.head.Case === \"SetNode\") {\r\n                                return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                            }\r\n                            else {\r\n                                return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (l1.head.Case === \"SetOne\") {\r\n                        return $target8(l1.head.Fields[0], l1.tail);\r\n                    }\r\n                    else {\r\n                        if (l1.head.Case === \"SetNode\") {\r\n                            return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                        }\r\n                        else {\r\n                            return tree_compareStacks(comparer, l1.tail, l2.tail);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    else {\r\n        if (l2.tail != null) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\nfunction tree_compare(comparer, s1, s2) {\r\n    if (s1.Case === \"SetEmpty\") {\r\n        if (s2.Case === \"SetEmpty\") {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else {\r\n        if (s2.Case === \"SetEmpty\") {\r\n            return 1;\r\n        }\r\n        else {\r\n            return tree_compareStacks(comparer, listOfArray([s1]), listOfArray([s2]));\r\n        }\r\n    }\r\n}\r\nfunction tree_mkFromEnumerator(comparer, acc, e) {\r\n    var cur = e.next();\r\n    while (!cur.done) {\r\n        acc = tree_add(comparer, cur.value, acc);\r\n        cur = e.next();\r\n    }\r\n    return acc;\r\n}\r\nfunction tree_ofSeq(comparer, c) {\r\n    var ie = c[Symbol.iterator]();\r\n    return tree_mkFromEnumerator(comparer, new SetTree(\"SetEmpty\", []), ie);\r\n}\r\nvar FableSet = (function () {\r\n    function FableSet() {\r\n    }\r\n    FableSet.prototype.ToString = function () {\r\n        return \"set [\" + Array.from(this).map(toString).join(\"; \") + \"]\";\r\n    };\r\n    FableSet.prototype.Equals = function (s2) {\r\n        return this.CompareTo(s2) === 0;\r\n    };\r\n    FableSet.prototype.CompareTo = function (s2) {\r\n        return this === s2 ? 0 : tree_compare(this.comparer, this.tree, s2.tree);\r\n    };\r\n    FableSet.prototype[Symbol.iterator] = function () {\r\n        var i = tree_mkIterator(this.tree);\r\n        return {\r\n            next: function () { return tree_moveNext(i); }\r\n        };\r\n    };\r\n    FableSet.prototype.values = function () {\r\n        return this[Symbol.iterator]();\r\n    };\r\n    FableSet.prototype.has = function (v) {\r\n        return tree_mem(this.comparer, v, this.tree);\r\n    };\r\n    FableSet.prototype.add = function (v) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableSet.prototype.delete = function (v) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableSet.prototype.clear = function () {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    Object.defineProperty(FableSet.prototype, \"size\", {\r\n        get: function () {\r\n            return tree_count(this.tree);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FableSet.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Collections.FSharpSet\",\r\n            interfaces: [\"System.IEquatable\", \"System.IComparable\"]\r\n        };\r\n    };\r\n    return FableSet;\r\n}());\r\nexport default FableSet;\r\nfunction from(comparer, tree) {\r\n    var s = new FableSet();\r\n    s.tree = tree;\r\n    s.comparer = comparer || new GenericComparer();\r\n    return s;\r\n}\r\nexport function create(ie, comparer) {\r\n    comparer = comparer || new GenericComparer();\r\n    return from(comparer, ie ? tree_ofSeq(comparer, ie) : new SetTree(\"SetEmpty\", []));\r\n}\r\nexport function isEmpty(s) {\r\n    return tree_isEmpty(s.tree);\r\n}\r\nexport function add(item, s) {\r\n    return from(s.comparer, tree_add(s.comparer, item, s.tree));\r\n}\r\nexport function addInPlace(item, s) {\r\n    return s.has(item) ? false : (s.add(item), true);\r\n}\r\nexport function remove(item, s) {\r\n    return from(s.comparer, tree_remove(s.comparer, item, s.tree));\r\n}\r\nexport function union(set1, set2) {\r\n    return set2.tree.Case === \"SetEmpty\"\r\n        ? set1\r\n        : set1.tree.Case === \"SetEmpty\"\r\n            ? set2\r\n            : from(set1.comparer, tree_union(set1.comparer, set1.tree, set2.tree));\r\n}\r\nexport function op_Addition(set1, set2) {\r\n    return union(set1, set2);\r\n}\r\nexport function unionInPlace(set1, set2) {\r\n    seqIterate(function (x) { set1.add(x); }, set2);\r\n}\r\nexport function unionMany(sets) {\r\n    return seqFold(function (acc, s) { return union(s, acc); }, create(), sets);\r\n}\r\nexport function difference(set1, set2) {\r\n    return set1.tree.Case === \"SetEmpty\"\r\n        ? set1\r\n        : set2.tree.Case === \"SetEmpty\"\r\n            ? set1\r\n            : from(set1.comparer, tree_diff(set1.comparer, set1.tree, set2.tree));\r\n}\r\nexport function op_Subtraction(set1, set2) {\r\n    return difference(set1, set2);\r\n}\r\nexport function differenceInPlace(set1, set2) {\r\n    seqIterate(function (x) { set1.delete(x); }, set2);\r\n}\r\nexport function intersect(set1, set2) {\r\n    return set2.tree.Case === \"SetEmpty\"\r\n        ? set2\r\n        : set1.tree.Case === \"SetEmpty\"\r\n            ? set1\r\n            : from(set1.comparer, tree_intersection(set1.comparer, set1.tree, set2.tree));\r\n}\r\nexport function intersectInPlace(set1, set2) {\r\n    var set2_ = set2 instanceof Set ? set2 : new Set(set2);\r\n    seqIterate(function (x) { if (!set2_.has(x)) {\r\n        set1.delete(x);\r\n    } }, set1);\r\n}\r\nexport function intersectMany(sets) {\r\n    return seqReduce(function (s1, s2) { return intersect(s1, s2); }, sets);\r\n}\r\nexport function isProperSubsetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_psubset(set1.comparer, set1.tree, set2.tree);\r\n    }\r\n    else {\r\n        set2 = set2 instanceof Set ? set2 : new Set(set2);\r\n        return seqForAll(function (x) { return set2.has(x); }, set1) && seqExists(function (x) { return !set1.has(x); }, set2);\r\n    }\r\n}\r\nexport function isProperSubset(set1, set2) {\r\n    return isProperSubsetOf(set1, set2);\r\n}\r\nexport function isSubsetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_subset(set1.comparer, set1.tree, set2.tree);\r\n    }\r\n    else {\r\n        set2 = set2 instanceof Set ? set2 : new Set(set2);\r\n        return seqForAll(function (x) { return set2.has(x); }, set1);\r\n    }\r\n}\r\nexport function isSubset(set1, set2) {\r\n    return isSubsetOf(set1, set2);\r\n}\r\nexport function isProperSupersetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_psubset(set1.comparer, set2.tree, set1.tree);\r\n    }\r\n    else {\r\n        return isProperSubset(set2 instanceof Set ? set2 : new Set(set2), set1);\r\n    }\r\n}\r\nexport function isProperSuperset(set1, set2) {\r\n    return isProperSupersetOf(set1, set2);\r\n}\r\nexport function isSupersetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_subset(set1.comparer, set2.tree, set1.tree);\r\n    }\r\n    else {\r\n        return isSubset(set2 instanceof Set ? set2 : new Set(set2), set1);\r\n    }\r\n}\r\nexport function isSuperset(set1, set2) {\r\n    return isSupersetOf(set1, set2);\r\n}\r\nexport function copyTo(xs, arr, arrayIndex, count) {\r\n    if (!Array.isArray(arr) && !ArrayBuffer.isView(arr))\r\n        throw new Error(\"Array is invalid\");\r\n    count = count || arr.length;\r\n    var i = arrayIndex || 0;\r\n    var iter = xs[Symbol.iterator]();\r\n    while (count--) {\r\n        var el = iter.next();\r\n        if (el.done)\r\n            break;\r\n        arr[i++] = el.value;\r\n    }\r\n}\r\nexport function partition(f, s) {\r\n    if (s.tree.Case === \"SetEmpty\") {\r\n        return [s, s];\r\n    }\r\n    else {\r\n        var tuple = tree_partition(s.comparer, f, s.tree);\r\n        return [from(s.comparer, tuple[0]), from(s.comparer, tuple[1])];\r\n    }\r\n}\r\nexport function filter(f, s) {\r\n    if (s.tree.Case === \"SetEmpty\") {\r\n        return s;\r\n    }\r\n    else {\r\n        return from(s.comparer, tree_filter(s.comparer, f, s.tree));\r\n    }\r\n}\r\nexport function map(f, s) {\r\n    var comparer = new GenericComparer();\r\n    return from(comparer, tree_fold(function (acc, k) { return tree_add(comparer, f(k), acc); }, new SetTree(\"SetEmpty\", []), s.tree));\r\n}\r\nexport function exists(f, s) {\r\n    return tree_exists(f, s.tree);\r\n}\r\nexport function forAll(f, s) {\r\n    return tree_forall(f, s.tree);\r\n}\r\nexport function fold(f, seed, s) {\r\n    return tree_fold(f, seed, s.tree);\r\n}\r\nexport function foldBack(f, s, seed) {\r\n    return tree_foldBack(f, s.tree, seed);\r\n}\r\nexport function iterate(f, s) {\r\n    tree_iter(f, s.tree);\r\n}\r\nexport function minimumElement(s) {\r\n    return tree_minimumElement(s.tree);\r\n}\r\nexport function minElement(s) {\r\n    return tree_minimumElement(s.tree);\r\n}\r\nexport function maximumElement(s) {\r\n    return tree_maximumElement(s.tree);\r\n}\r\nexport function maxElement(s) {\r\n    return tree_maximumElement(s.tree);\r\n}\r\n","import _Symbol from \"./Symbol\";\r\nvar Long = (function () {\r\n    function Long(low, high, unsigned) {\r\n        this.eq = this.equals;\r\n        this.neq = this.notEquals;\r\n        this.lt = this.lessThan;\r\n        this.lte = this.lessThanOrEqual;\r\n        this.gt = this.greaterThan;\r\n        this.gte = this.greaterThanOrEqual;\r\n        this.comp = this.compare;\r\n        this.neg = this.negate;\r\n        this.abs = this.absolute;\r\n        this.sub = this.subtract;\r\n        this.mul = this.multiply;\r\n        this.div = this.divide;\r\n        this.mod = this.modulo;\r\n        this.shl = this.shiftLeft;\r\n        this.shr = this.shiftRight;\r\n        this.shru = this.shiftRightUnsigned;\r\n        this.Equals = this.equals;\r\n        this.CompareTo = this.compare;\r\n        this.ToString = this.toString;\r\n        this.low = low | 0;\r\n        this.high = high | 0;\r\n        this.unsigned = !!unsigned;\r\n    }\r\n    Long.prototype.toInt = function () {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n    Long.prototype.toNumber = function () {\r\n        if (this.unsigned)\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n    Long.prototype.toString = function (radix) {\r\n        if (radix === void 0) { radix = 10; }\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n        if (this.isZero())\r\n            return '0';\r\n        if (this.isNegative()) {\r\n            if (this.eq(MIN_VALUE)) {\r\n                var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\r\n                return div.toString(radix) + rem1.toInt().toString(radix);\r\n            }\r\n            else\r\n                return '-' + this.neg().toString(radix);\r\n        }\r\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n    Long.prototype.getHighBits = function () {\r\n        return this.high;\r\n    };\r\n    Long.prototype.getHighBitsUnsigned = function () {\r\n        return this.high >>> 0;\r\n    };\r\n    Long.prototype.getLowBits = function () {\r\n        return this.low;\r\n    };\r\n    Long.prototype.getLowBitsUnsigned = function () {\r\n        return this.low >>> 0;\r\n    };\r\n    Long.prototype.getNumBitsAbs = function () {\r\n        if (this.isNegative())\r\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n    Long.prototype.isZero = function () {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n    Long.prototype.isNegative = function () {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n    Long.prototype.isPositive = function () {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n    Long.prototype.isOdd = function () {\r\n        return (this.low & 1) === 1;\r\n    };\r\n    Long.prototype.isEven = function () {\r\n        return (this.low & 1) === 0;\r\n    };\r\n    Long.prototype.equals = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n    Long.prototype.notEquals = function (other) {\r\n        return !this.eq(other);\r\n    };\r\n    Long.prototype.lessThan = function (other) {\r\n        return this.comp(other) < 0;\r\n    };\r\n    Long.prototype.lessThanOrEqual = function (other) {\r\n        return this.comp(other) <= 0;\r\n    };\r\n    Long.prototype.greaterThan = function (other) {\r\n        return this.comp(other) > 0;\r\n    };\r\n    Long.prototype.greaterThanOrEqual = function (other) {\r\n        return this.comp(other) >= 0;\r\n    };\r\n    Long.prototype.compare = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.eq(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(), otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        if (!this.unsigned)\r\n            return this.sub(other).isNegative() ? -1 : 1;\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n    Long.prototype.negate = function () {\r\n        if (!this.unsigned && this.eq(MIN_VALUE))\r\n            return MIN_VALUE;\r\n        return this.not().add(ONE);\r\n    };\r\n    Long.prototype.absolute = function () {\r\n        if (!this.unsigned && this.isNegative())\r\n            return this.negate();\r\n        else\r\n            return this;\r\n    };\r\n    Long.prototype.add = function (addend) {\r\n        if (!isLong(addend))\r\n            addend = fromValue(addend);\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n    Long.prototype.subtract = function (subtrahend) {\r\n        if (!isLong(subtrahend))\r\n            subtrahend = fromValue(subtrahend);\r\n        return this.add(subtrahend.neg());\r\n    };\r\n    Long.prototype.multiply = function (multiplier) {\r\n        if (this.isZero())\r\n            return ZERO;\r\n        if (!isLong(multiplier))\r\n            multiplier = fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return ZERO;\r\n        if (this.eq(MIN_VALUE))\r\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n        if (multiplier.eq(MIN_VALUE))\r\n            return this.isOdd() ? MIN_VALUE : ZERO;\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.neg().mul(multiplier.neg());\r\n            else\r\n                return this.neg().mul(multiplier).neg();\r\n        }\r\n        else if (multiplier.isNegative())\r\n            return this.mul(multiplier.neg()).neg();\r\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n    Long.prototype.divide = function (divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw Error('division by zero');\r\n        if (this.isZero())\r\n            return this.unsigned ? UZERO : ZERO;\r\n        var approx = 0, rem = ZERO, res = ZERO;\r\n        if (!this.unsigned) {\r\n            if (this.eq(MIN_VALUE)) {\r\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                    return MIN_VALUE;\r\n                else if (divisor.eq(MIN_VALUE))\r\n                    return ONE;\r\n                else {\r\n                    var halfThis = this.shr(1);\r\n                    var approx_1 = halfThis.div(divisor).shl(1);\r\n                    if (approx_1.eq(ZERO)) {\r\n                        return divisor.isNegative() ? ONE : NEG_ONE;\r\n                    }\r\n                    else {\r\n                        rem = this.sub(divisor.mul(approx_1));\r\n                        res = approx_1.add(rem.div(divisor));\r\n                        return res;\r\n                    }\r\n                }\r\n            }\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return this.unsigned ? UZERO : ZERO;\r\n            if (this.isNegative()) {\r\n                if (divisor.isNegative())\r\n                    return this.neg().div(divisor.neg());\r\n                return this.neg().div(divisor).neg();\r\n            }\r\n            else if (divisor.isNegative())\r\n                return this.div(divisor.neg()).neg();\r\n            res = ZERO;\r\n        }\r\n        else {\r\n            if (!divisor.unsigned)\r\n                divisor = divisor.toUnsigned();\r\n            if (divisor.gt(this))\r\n                return UZERO;\r\n            if (divisor.gt(this.shru(1)))\r\n                return UONE;\r\n            res = UZERO;\r\n        }\r\n        rem = this;\r\n        while (rem.gte(divisor)) {\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);\r\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n                approx -= delta;\r\n                approxRes = fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.mul(divisor);\r\n            }\r\n            if (approxRes.isZero())\r\n                approxRes = ONE;\r\n            res = res.add(approxRes);\r\n            rem = rem.sub(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n    Long.prototype.modulo = function (divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n    ;\r\n    Long.prototype.not = function () {\r\n        return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n    ;\r\n    Long.prototype.and = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n    Long.prototype.or = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n    Long.prototype.xor = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n    Long.prototype.shiftLeft = function (numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits = numBits & 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n    Long.prototype.shiftRight = function (numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits = numBits & 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n    Long.prototype.shiftRightUnsigned = function (numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits = numBits & 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            }\r\n            else if (numBits === 32)\r\n                return fromBits(high, 0, this.unsigned);\r\n            else\r\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n    Long.prototype.toSigned = function () {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, false);\r\n    };\r\n    Long.prototype.toUnsigned = function () {\r\n        if (this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, true);\r\n    };\r\n    Long.prototype.toBytes = function (le) {\r\n        return le ? this.toBytesLE() : this.toBytesBE();\r\n    };\r\n    Long.prototype.toBytesLE = function () {\r\n        var hi = this.high, lo = this.low;\r\n        return [\r\n            lo & 0xff,\r\n            (lo >>> 8) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            hi & 0xff,\r\n            (hi >>> 8) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 24) & 0xff\r\n        ];\r\n    };\r\n    Long.prototype.toBytesBE = function () {\r\n        var hi = this.high, lo = this.low;\r\n        return [\r\n            (hi >>> 24) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 8) & 0xff,\r\n            hi & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 8) & 0xff,\r\n            lo & 0xff\r\n        ];\r\n    };\r\n    Long.prototype[_Symbol.reflection] = function () {\r\n        return {\r\n            type: \"System.Int64\",\r\n            interfaces: [\"FSharpRecord\", \"System.IComparable\"],\r\n            properties: {\r\n                low: \"number\",\r\n                high: \"number\",\r\n                unsigned: \"boolean\"\r\n            }\r\n        };\r\n    };\r\n    return Long;\r\n}());\r\nexport { Long };\r\nvar INT_CACHE = {};\r\nvar UINT_CACHE = {};\r\nexport function isLong(obj) {\r\n    return (obj && obj instanceof Long);\r\n}\r\nexport function fromInt(value, unsigned) {\r\n    if (unsigned === void 0) { unsigned = false; }\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n    else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\nexport function fromNumber(value, unsigned) {\r\n    if (unsigned === void 0) { unsigned = false; }\r\n    if (isNaN(value) || !isFinite(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    }\r\n    else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\nexport function fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\nvar pow_dbl = Math.pow;\r\nexport function fromString(str, unsigned, radix) {\r\n    if (unsigned === void 0) { unsigned = false; }\r\n    if (radix === void 0) { radix = 10; }\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        radix = unsigned,\r\n            unsigned = false;\r\n    }\r\n    else {\r\n        unsigned = !!unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    var p = str.indexOf('-');\r\n    if (p > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        }\r\n        else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\nexport function fromValue(val) {\r\n    if (val instanceof Long)\r\n        return val;\r\n    if (typeof val === 'number')\r\n        return fromNumber(val);\r\n    if (typeof val === 'string')\r\n        return fromString(val);\r\n    return fromBits(val.low, val.high, val.unsigned);\r\n}\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\nexport var ZERO = fromInt(0);\r\nexport var UZERO = fromInt(0, true);\r\nexport var ONE = fromInt(1);\r\nexport var UONE = fromInt(1, true);\r\nexport var NEG_ONE = fromInt(-1);\r\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\r\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\r\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\r\n","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Promise as _Promise } from \"./Promise\";\nimport { toJson, ofJson } from \"fable-core/Serialize\";\n\nfunction _fetch(url, init) {\n        return fetch(url, init).then(function (response) {\n                if (response.ok) {\n                        return response;\n                } else {\n                        throw new Error(String(response.status) + \" \" + response.statusText + \" for URL \" + response.url);\n                }\n        });\n}\n\nexport { _fetch as fetch };\nexport function tryFetch(url, init) {\n        return _Promise.result(_fetch(url, init));\n}\nexport function fetchAs(url, init, _genArgs) {\n        return _fetch(url, init).then(function (fetched) {\n                return fetched.text();\n        }).then(function (json) {\n                return ofJson(json, {\n                        T: _genArgs.T\n                });\n        });\n}\nexport function tryFetchAs(url, init, _genArgs) {\n        return _Promise.result(fetchAs(url, init, {\n                T: _genArgs.T\n        }));\n}\nexport function postRecord(url, record, properties) {\n        var props = Object.assign({\n                method: \"POST\",\n                headers: _defineProperty({}, \"Content-Type\", \"application/json\"),\n                body: toJson(record)\n        }, properties);\n        return _fetch(url, props);\n}\nexport function tryPostRecord(url, record, properties) {\n        return _Promise.result(postRecord(url, record, properties));\n}\nexport function patchRecord(url, record, properties) {\n        var props = Object.assign({\n                method: \"PATCH\",\n                headers: _defineProperty({}, \"Content-Type\", \"application/json\"),\n                body: toJson(record)\n        }, properties);\n        return _fetch(url, props);\n}\n//# sourceMappingURL=Fetch.js.map","#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\"\r\n#r @\"node_modules\\fable-core\\Fable.Core.dll\"\r\n#r @\"node_modules\\fable-powerpack\\Fable.PowerPack.dll\"\r\n\r\nopen Fable.Core\r\nopen Fable.Import.Browser\r\nopen Fable.PowerPack.Fetch\r\nopen Fable.Core.JsInterop\r\n\r\nlet ready fn =\r\n    if (document.readyState <> \"loading\") \r\n    then \r\n        fn()\r\n    else\r\n        document.addEventListener(\"DOMContentLoaded\",\r\n                                  U2.Case1 (EventListener(fun _ -> fn())))\r\n\r\nlet JustLazy = importDefault<obj> \"./node_modules/justlazy/src/justlazy.js\"\r\nlet fetchMy url (loadme:Element) post =\r\n    async {\r\n        let! response = fetch url [] |> Async.AwaitPromise\r\n        let! body = response.text() |> Async.AwaitPromise\r\n        loadme.innerHTML <- body\r\n        post()\r\n        JustLazy?registerLazyLoadByClass(\"justlazy-spinner\") |> ignore\r\n        return ()\r\n    }\r\n\r\nlet rec toload target origin =\r\n    let loadme = document.getElementById(target)\r\n    let links = document.querySelectorAll(origin)\r\n    let l = links.length\r\n    let reparseFun =\r\n        match target with\r\n        | \"content\" -> (fun _ -> toload \"LoadMe\" \"a.pageFetcher\")\r\n        | _ -> ignore\r\n    for i in 0.0 .. (l-1.0) do\r\n        let el = links.item(i) :?> HTMLElement\r\n        let url = el.getAttribute(\"href\")\r\n        el.onclick <- (fun _ -> fetchMy url loadme reparseFun\r\n                                |> Async.StartImmediate\r\n                                box false)\r\n\r\nlet init() =\r\n    toload \"content\" \"nav a\"\r\n    document.getElementById(\"first\").click()\r\n    document.getElementById(\"first\").focus()\r\n\r\nready init\r\n","/**\n * justlazy 1.6.0\n *\n * Repo: https://github.com/fhopeman/justlazy\n * Demo: http://fhopeman.github.io/justlazy\n */\n(function(root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory();\n    } else {\n        root.Justlazy = factory();\n    }\n}(this, function() {\n    \"use strict\";\n\n    var _createImage = function(imgPlaceholder, imgAttributes, onloadCallback, onerrorCallback, onreplaceCallback) {\n        var img = document.createElement(\"img\");\n\n        img.onload = function() {\n            if (!!onloadCallback) {\n                onloadCallback.call(img);\n            }\n            _replacePlaceholderWithImage(imgPlaceholder, img, onreplaceCallback);\n        };\n\n        img.onerror = function() {\n            if (!!onerrorCallback) {\n                onerrorCallback.call(img);\n            }\n            _replacePlaceholderWithImage(imgPlaceholder, img, onreplaceCallback);\n        };\n\n        if (!!imgAttributes.title) {\n            img.title = imgAttributes.title;\n        }\n        if (!!imgAttributes.srcset) {\n            img.setAttribute(\"srcset\", imgAttributes.srcset);\n        }\n\n        img.alt = imgAttributes.alt;\n        img.src = imgAttributes.src;\n    };\n\n    var _replacePlaceholderWithImage = function(imgPlaceholder, img, onreplaceCallback) {\n        var parentNode = imgPlaceholder.parentNode;\n        if (!!parentNode) {\n            parentNode.replaceChild(img, imgPlaceholder);\n            if (!!onreplaceCallback) {\n                onreplaceCallback.call(img);\n            }\n        }\n    };\n\n    var _resolveImageAttributes = function(imgPlaceholder) {\n        return {\n            src: imgPlaceholder.getAttribute(\"data-src\"),\n            alt: imgPlaceholder.getAttribute(\"data-alt\"),\n            title: imgPlaceholder.getAttribute(\"data-title\"),\n            srcset: imgPlaceholder.getAttribute(\"data-srcset\")\n        };\n    };\n\n    var _validateOptions = function(options) {\n        return options || {};\n    };\n\n    var _isVisible = function(placeholder, optionalThreshold) {\n        var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n        var threshold = optionalThreshold || 0;\n\n        return placeholder.getBoundingClientRect().top - windowInnerHeight <= threshold;\n    };\n\n    var _loadImgIfVisible = function(imgPlaceholder, options) {\n        var scrollEventCallback = function(e) {\n            if (_isVisible(imgPlaceholder, options.threshold)) {\n                lazyLoad(imgPlaceholder, options);\n\n                if (window.removeEventListener) {\n                    window.removeEventListener(e.type, scrollEventCallback, false);\n                } else {\n                    window.detachEvent(\"on\" + e.type, scrollEventCallback);\n                }\n            }\n        };\n\n        return scrollEventCallback;\n    };\n\n    /**\n     * Lazy loads image with img tag.\n     *\n     * @param {Object} imgPlaceholder The placeholder is a html node of any type (e.g. a span element).\n     *                                The node has to provide the data element data-src and data-alt.\n     *                                All other attributes are optional.\n     * @param {Object} options Optional object with following attributes:\n     *                           - onloadCallback:\n     *                                 Optional callback which is invoked after the image is loaded\n     *                                 successfully but before the actual replacement.\n     *                           - onerrorCallback:\n     *                                 Optional error handler which is invoked before the actual\n     *                                 replacement if the image could not be loaded.\n     *                           - onreplaceCallback\n     *                                 Optional callback which is invoked directly after the\n     *                                 replacement of the placeholder.\n     */\n    var lazyLoad = function(imgPlaceholder, options) {\n        var imgAttributes = _resolveImageAttributes(imgPlaceholder);\n        var validatedOptions = _validateOptions(options);\n\n        if (!!imgAttributes.src && (!!imgAttributes.alt || imgAttributes.alt === \"\")) {\n            _createImage(\n                imgPlaceholder,\n                imgAttributes,\n                validatedOptions.onloadCallback,\n                validatedOptions.onerrorCallback,\n                validatedOptions.onreplaceCallback\n            );\n        }\n    };\n\n    /**\n     * Registers the lazy loading event. If the placeholder becomes visible, the image\n     * will be loaded automatically.\n     *\n     * @param {Object} imgPlaceholder The placeholder is a html node of any type (e.g. a span element).\n     *                                The node has to provide the data element data-src and data-alt.\n     *                                All other attributes are optional.\n     * @param {Object} options Optional object of options.\n     */\n    var registerLazyLoad = function(imgPlaceholder, options) {\n        var validatedOptions = _validateOptions(options);\n        if (_isVisible(imgPlaceholder, validatedOptions.threshold)) {\n            lazyLoad(imgPlaceholder, options);\n        } else {\n            var loadImgIfVisible = _loadImgIfVisible(imgPlaceholder, validatedOptions);\n            if (window.addEventListener) {\n                window.addEventListener(\"scroll\", loadImgIfVisible, false);\n            } else {\n                window.attachEvent(\"onscroll\", loadImgIfVisible);\n            }\n        }\n    };\n\n    /**\n     * Registers the lazy loading by the defined class of the placeholder(s). If the\n     * placeholders become visible, the images will be loaded automatically.\n     *\n     * @param imgPlaceholderClass Class of the placeholder.\n     * @param {Object} options Optional object of options.\n     */\n    var registerLazyLoadByClass = function(imgPlaceholderClass, options) {\n        var placeholders = document.querySelectorAll(\".\" + imgPlaceholderClass);\n        for (var i = 0; i < placeholders.length; ++i) {\n            Justlazy.registerLazyLoad(placeholders[i], options);\n        }\n    };\n\n    return {\n        lazyLoad: lazyLoad,\n        registerLazyLoad: registerLazyLoad,\n        registerLazyLoadByClass: registerLazyLoadByClass\n    };\n}));\n"]}